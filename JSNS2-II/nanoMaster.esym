C L "rtncode" 0 498 1 "FUNCTION"
C G "" 0 570 5 "*"
C G "" 0 570 121 "*"
C G "" 0 570 5 "*"
C G "" 0 570 2 "*"
C G "" 0 831 1 "*"
D G "__PCH__" 0 834 ""5.072""
D G "__DEVICE__" 0 834 "4620"
D G "__DATE__" 0 834 ""03-Oct-22""
D G "__TIME__" 0 834 ""13:24:09""
D G "_UNICODE" 0 834 ""?""
D G "__EVAL" 0 834 ""?"" "* Master Control for JSNS2 *"
C G "" 0 3 1 "*"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 43 ""
v L "value" 1 43 "int8" `55 
f B "set_tris_a" 1 43 "void(int8 value)" `54 
f N "set_tris_b" 1 44 ""
v L "value" 1 44 "int8" `57 
f B "set_tris_b" 1 44 "void(int8 value)" `56 
f N "set_tris_c" 1 45 ""
v L "value" 1 45 "int8" `59 
f B "set_tris_c" 1 45 "void(int8 value)" `58 
f N "set_tris_d" 1 46 ""
v L "value" 1 46 "int8" `61 
f B "set_tris_d" 1 46 "void(int8 value)" `60 
f N "set_tris_e" 1 47 ""
v L "value" 1 47 "int8" `63 
f B "set_tris_e" 1 47 "void(int8 value)" `62 
f N "get_tris_a" 1 48 ""
f B "get_tris_a" 1 48 "int8()" `64 
f N "get_tris_b" 1 49 ""
f B "get_tris_b" 1 49 "int8()" `65 
f N "get_tris_c" 1 50 ""
f B "get_tris_c" 1 50 "int8()" `66 
f N "get_tris_d" 1 51 ""
f B "get_tris_d" 1 51 "int8()" `67 
f N "get_tris_e" 1 52 ""
f B "get_tris_e" 1 52 "int8()" `68 
f N "output_a" 1 53 ""
v L "value" 1 53 "int8" `70 
f B "output_a" 1 53 "void(int8 value)" `69 
f N "output_b" 1 54 ""
v L "value" 1 54 "int8" `72 
f B "output_b" 1 54 "void(int8 value)" `71 
f N "output_c" 1 55 ""
v L "value" 1 55 "int8" `74 
f B "output_c" 1 55 "void(int8 value)" `73 
f N "output_d" 1 56 ""
v L "value" 1 56 "int8" `76 
f B "output_d" 1 56 "void(int8 value)" `75 
f N "output_e" 1 57 ""
v L "value" 1 57 "int8" `78 
f B "output_e" 1 57 "void(int8 value)" `77 
f N "input_a" 1 58 ""
f B "input_a" 1 58 "int8()" `79 
f N "input_b" 1 59 ""
f B "input_b" 1 59 "int8()" `80 
f N "input_c" 1 60 ""
f B "input_c" 1 60 "int8()" `81 
f N "input_d" 1 61 ""
f B "input_d" 1 61 "int8()" `82 
f N "input_e" 1 62 ""
f B "input_e" 1 62 "int8()" `83 
f N "input_change_a" 1 63 ""
f B "input_change_a" 1 63 "int8()" `84 
f N "input_change_b" 1 64 ""
f B "input_change_b" 1 64 "int8()" `85 
f N "input_change_c" 1 65 ""
f B "input_change_c" 1 65 "int8()" `86 
f N "input_change_d" 1 66 ""
f B "input_change_d" 1 66 "int8()" `87 
f N "input_change_e" 1 67 ""
f B "input_change_e" 1 67 "int8()" `88 
f N "port_b_pullups" 1 68 ""
v L "value" 1 68 "int8" `90 
f B "port_b_pullups" 1 68 "void(int8 value)" `89 
f N "input" 1 69 ""
v L "pin" 1 69 "int16" `92 
f B "input" 1 69 "int8(int16 pin)" `91 
f N "input_state" 1 70 ""
v L "pin" 1 70 "int16" `94 
f B "input_state" 1 70 "int8(int16 pin)" `93 
f N "output_low" 1 71 ""
v L "pin" 1 71 "int16" `96 
f B "output_low" 1 71 "void(int16 pin)" `95 
f N "output_high" 1 72 ""
v L "pin" 1 72 "int16" `98 
f B "output_high" 1 72 "void(int16 pin)" `97 
f N "output_toggle" 1 73 ""
v L "pin" 1 73 "int16" `100 
f B "output_toggle" 1 73 "void(int16 pin)" `99 
f N "output_bit" 1 74 ""
v L "pin" 1 74 "int16" `102 
v L "level" 1 74 "int8" `103 
f B "output_bit" 1 74 "void(int16 pin,int8 level)" `101 
f N "output_float" 1 75 ""
v L "pin" 1 75 "int16" `105 
f B "output_float" 1 75 "void(int16 pin)" `104 
f N "output_drive" 1 76 ""
v L "pin" 1 76 "int16" `107 
f B "output_drive" 1 76 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 80 "31744"
d G "PIN_A1" 1 81 "31745"
d G "PIN_A2" 1 82 "31746"
d G "PIN_A3" 1 83 "31747"
d G "PIN_A4" 1 84 "31748"
d G "PIN_A5" 1 85 "31749"
d G "PIN_A6" 1 86 "31750"
d G "PIN_A7" 1 87 "31751"
d G "PIN_B0" 1 89 "31752"
d G "PIN_B1" 1 90 "31753"
d G "PIN_B2" 1 91 "31754"
d G "PIN_B3" 1 92 "31755"
d G "PIN_B4" 1 93 "31756"
d G "PIN_B5" 1 94 "31757"
d G "PIN_B6" 1 95 "31758"
d G "PIN_B7" 1 96 "31759"
d G "PIN_C0" 1 98 "31760"
d G "PIN_C1" 1 99 "31761"
d G "PIN_C2" 1 100 "31762"
d G "PIN_C3" 1 101 "31763"
d G "PIN_C4" 1 102 "31764"
d G "PIN_C5" 1 103 "31765"
d G "PIN_C6" 1 104 "31766"
d G "PIN_C7" 1 105 "31767"
d G "PIN_D0" 1 107 "31768"
d G "PIN_D1" 1 108 "31769"
d G "PIN_D2" 1 109 "31770"
d G "PIN_D3" 1 110 "31771"
d G "PIN_D4" 1 111 "31772"
d G "PIN_D5" 1 112 "31773"
d G "PIN_D6" 1 113 "31774"
d G "PIN_D7" 1 114 "31775"
d G "PIN_E0" 1 116 "31776"
d G "PIN_E1" 1 117 "31777"
d G "PIN_E2" 1 118 "31778"
d G "PIN_E3" 1 119 "31779"
d G "FALSE" 1 122 "0"
d G "TRUE" 1 123 "1"
d G "BYTE" 1 125 "int8"
d G "BOOLEAN" 1 126 "int1"
d G "getc" 1 128 "getch"
d G "fgetc" 1 129 "getch"
d G "getchar" 1 130 "getch"
d G "putc" 1 131 "putchar"
d G "fputc" 1 132 "putchar"
d G "fgets" 1 133 "gets"
d G "fputs" 1 134 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 139 ""
f B "restart_cause" 1 139 "int8()" `108 
f N "reset_cpu" 1 140 ""
f B "reset_cpu" 1 140 "void()" `109 
f N "sleep" 1 141 ""
f B "sleep" 1 141 "void()" `110 
f N "sleep" 1 142 ""
v L "type" 1 142 "int8" `112 
f B "sleep" 1 142 "void(int8 type)" `111  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 144 "7"
d G "MCLR_FROM_SLEEP" 1 145 "11"
d G "MCLR_FROM_RUN" 1 146 "15"
d G "NORMAL_POWER_UP" 1 147 "12"
d G "BROWNOUT_RESTART" 1 148 "14"
d G "WDT_FROM_SLEEP" 1 149 "3"
d G "RESET_INSTRUCTION" 1 150 "0"
d G "SLEEP_FULL" 1 153 "0" "Default"
d G "SLEEP_IDLE" 1 154 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 161 ""
v L "mode" 1 161 "int8" `114 
f B "setup_timer_0" 1 161 "void(int8 mode)" `113 
f N "set_timer0" 1 162 ""
v L "value" 1 162 "int16" `116 
f B "set_timer0" 1 162 "void(int16 value)" `115 
f N "get_timer0" 1 163 ""
f B "get_timer0" 1 163 "int16()" `117 
f N "setup_counters" 1 164 ""
v L "mode" 1 164 "int8" `119 
v L "prescaler" 1 164 "int8" `120 
f B "setup_counters" 1 164 "void(int8 mode,int8 prescaler)" `118 
f N "set_rtcc" 1 165 ""
v L "value" 1 165 "int16" `122 
f B "set_rtcc" 1 165 "void(int16 value)" `121 
f N "get_rtcc" 1 166 ""
f B "get_rtcc" 1 166 "int16()" `123  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 168 "0"
d G "T0_EXT_L_TO_H" 1 169 "32"
d G "T0_EXT_H_TO_L" 1 170 "48"
d G "T0_DIV_1" 1 172 "8"
d G "T0_DIV_2" 1 173 "0"
d G "T0_DIV_4" 1 174 "1"
d G "T0_DIV_8" 1 175 "2"
d G "T0_DIV_16" 1 176 "3"
d G "T0_DIV_32" 1 177 "4"
d G "T0_DIV_64" 1 178 "5"
d G "T0_DIV_128" 1 179 "6"
d G "T0_DIV_256" 1 180 "7"
d G "T0_OFF" 1 182 "0x80"
d G "T0_8_BIT" 1 184 "0x40"
d G "RTCC_INTERNAL" 1 188 "0"
d G "RTCC_EXT_L_TO_H" 1 189 "32"
d G "RTCC_EXT_H_TO_L" 1 190 "48"
d G "RTCC_DIV_1" 1 191 "8"
d G "RTCC_DIV_2" 1 192 "0"
d G "RTCC_DIV_4" 1 193 "1"
d G "RTCC_DIV_8" 1 194 "2"
d G "RTCC_DIV_16" 1 195 "3"
d G "RTCC_DIV_32" 1 196 "4"
d G "RTCC_DIV_64" 1 197 "5"
d G "RTCC_DIV_128" 1 198 "6"
d G "RTCC_DIV_256" 1 199 "7"
d G "RTCC_OFF" 1 200 "0x80"
d G "RTCC_8_BIT" 1 201 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 212 ""
v L "mode" 1 212 "int16" `125 
f B "setup_wdt" 1 212 "void(int16 mode)" `124 
f N "restart_wdt" 1 213 ""
f B "restart_wdt" 1 213 "void()" `126  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 215 "0x100"
d G "WDT_OFF" 1 216 "0"
d G "WDT_4MS" 1 218 "0x300"
d G "WDT_8MS" 1 219 "0x500"
d G "WDT_16MS" 1 220 "0x700"
d G "WDT_32MS" 1 221 "0x900"
d G "WDT_64MS" 1 222 "0xB00"
d G "WDT_128MS" 1 223 "0xD00"
d G "WDT_256MS" 1 224 "0xF00"
d G "WDT_512MS" 1 225 "0x1100"
d G "WDT_1S" 1 226 "0x1300"
d G "WDT_2S" 1 227 "0x1500"
d G "WDT_4S" 1 228 "0x1700"
d G "WDT_8S" 1 229 "0x1900"
d G "WDT_16" 1 230 "0x1B00"
d G "WDT_32S" 1 231 "0x1D00"
d G "WDT_64S" 1 232 "0x1F00"
d G "WDT_128S" 1 233 "0x2100"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 238 ""
v L "mode" 1 238 "int16" `128 
f B "setup_timer_1" 1 238 "void(int16 mode)" `127 
f N "get_timer1" 1 239 ""
f B "get_timer1" 1 239 "int16()" `129 
f N "set_timer1" 1 240 ""
v L "value" 1 240 "int16" `131 
f B "set_timer1" 1 240 "void(int16 value)" `130  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 243 "0"
d G "T1_INTERNAL" 1 244 "0x85"
d G "T1_EXTERNAL" 1 245 "0x87"
d G "T1_EXTERNAL_SYNC" 1 246 "0x83"
d G "T1_CLK_OUT" 1 248 "8"
d G "T1_DIV_BY_1" 1 250 "0"
d G "T1_DIV_BY_2" 1 251 "0x10"
d G "T1_DIV_BY_4" 1 252 "0x20"
d G "T1_DIV_BY_8" 1 253 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_timer_2" 1 258 ""
v L "mode" 1 258 "int8" `133 
v L "period" 1 258 "int8" `134 
v L "postscale" 1 258 "int8" `135 
f B "setup_timer_2" 1 258 "void(int8 mode,int8 period,int8 postscale)" `132 
f N "get_timer2" 1 259 ""
f B "get_timer2" 1 259 "int8()" `136 
f N "set_timer2" 1 260 ""
v L "value" 1 260 "int8" `138 
f B "set_timer2" 1 260 "void(int8 value)" `137  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 262 "0"
d G "T2_DIV_BY_1" 1 263 "4"
d G "T2_DIV_BY_4" 1 264 "5"
d G "T2_DIV_BY_16" 1 265 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
f N "setup_timer_3" 1 270 ""
v L "mode" 1 270 "int16" `140 
f B "setup_timer_3" 1 270 "void(int16 mode)" `139 
f N "get_timer3" 1 271 ""
f B "get_timer3" 1 271 "int16()" `141 
f N "set_timer3" 1 272 ""
v L "value" 1 272 "int16" `143 
f B "set_timer3" 1 272 "void(int16 value)" `142  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 275 "0"
d G "T3_INTERNAL" 1 276 "0x85"
d G "T3_EXTERNAL" 1 277 "0x87"
d G "T3_EXTERNAL_SYNC" 1 278 "0x83"
d G "T3_DIV_BY_1" 1 280 "0"
d G "T3_DIV_BY_2" 1 281 "0x10"
d G "T3_DIV_BY_4" 1 282 "0x20"
d G "T3_DIV_BY_8" 1 283 "0x30"
d G "T3_CCP1_TO_2" 1 286 "0x48"
d G "T3_CCP2" 1 287 "0x8"
c L "set_timer3" 1 1 4 "FUNCTION"
f N "setup_ccp1" 1 293 ""
v L "mode" 1 293 "int32" `145 
f B "setup_ccp1" 1 293 "void(int32 mode)" `144 
f N "setup_ccp1" 1 294 ""
v L "mode" 1 294 "int32" `147 
v L "pwm" 1 294 "int8" `148 
f B "setup_ccp1" 1 294 "void(int32 mode,int8 pwm)" `146 
f N "set_pwm1_duty" 1 295 ""
v L "value" 1 295 "int16" `150 
f B "set_pwm1_duty" 1 295 "void(int16 value)" `149  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 297 "0"
d G "CCP_CAPTURE_FE" 1 298 "0x04"
d G "CCP_CAPTURE_RE" 1 299 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 300 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 301 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 302 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 303 "0x09"
d G "CCP_COMPARE_INT" 1 304 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 305 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 306 "0x0B"
d G "CCP_PWM" 1 307 "0x0C"
d G "CCP_PWM_PLUS_1" 1 308 "0x1c"
d G "CCP_PWM_PLUS_2" 1 309 "0x2c"
d G "CCP_PWM_PLUS_3" 1 310 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
d G "CCP_PWM_H_H" 1 317 "0x0c"
d G "CCP_PWM_H_L" 1 318 "0x0d"
d G "CCP_PWM_L_H" 1 319 "0x0e"
d G "CCP_PWM_L_L" 1 320 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 322 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 323 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 324 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 326 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 327 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 328 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 329 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 330 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 331 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 332 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 334 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 335 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 336 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 338 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 339 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 340 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 342 "0x80000000"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
f N "setup_ccp2" 1 346 ""
v L "mode" 1 346 "int32" `155 
f B "setup_ccp2" 1 346 "void(int32 mode)" `154 
f N "setup_ccp2" 1 347 ""
v L "mode" 1 347 "int32" `157 
v L "pwm" 1 347 "int8" `158 
f B "setup_ccp2" 1 347 "void(int32 mode,int8 pwm)" `156 
f N "set_pwm2_duty" 1 348 ""
v L "value" 1 348 "int16" `160 
f B "set_pwm2_duty" 1 348 "void(int16 value)" `159 
c L "set_pwm2_duty" 1 1 5 "FUNCTION"
f N "setup_psp" 1 357 ""
v L "mode" 1 357 "int8" `165 
f B "setup_psp" 1 357 "void(int8 mode)" `164 
f N "psp_output_full" 1 358 ""
f B "psp_output_full" 1 358 "int8()" `166 
f N "psp_input_full" 1 359 ""
f B "psp_input_full" 1 359 "int8()" `167 
f N "psp_overflow" 1 360 ""
f B "psp_overflow" 1 360 "int8()" `168  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 362 "0x10"
d G "PSP_DISABLED" 1 363 "0"
c L "psp_overflow" 1 1 3 "FUNCTION"
f N "setup_spi" 1 370 ""
v L "mode" 1 370 "int32" `171 
f B "setup_spi" 1 370 "void(int32 mode)" `170 
f N "spi_write" 1 371 ""
v L "value" 1 371 "int8" `173 
f B "spi_write" 1 371 "void(int8 value)" `172 
f N "spi_read" 1 372 ""
f B "spi_read" 1 372 "int8()" `174 
f N "spi_read" 1 373 ""
v L "value" 1 373 "int8" `176 
f B "spi_read" 1 373 "int8(int8 value)" `175 
f N "spi_data_is_in" 1 374 ""
f B "spi_data_is_in" 1 374 "int8()" `177 
f N "setup_spi2" 1 375 ""
v L "mode" 1 375 "int32" `179 
f B "setup_spi2" 1 375 "void(int32 mode)" `178 
f N "spi_write2" 1 376 ""
v L "value" 1 376 "int8" `181 
f B "spi_write2" 1 376 "void(int8 value)" `180 
f N "spi_read2" 1 377 ""
f B "spi_read2" 1 377 "int8()" `182 
f N "spi_read2" 1 378 ""
v L "value" 1 378 "int8" `184 
f B "spi_read2" 1 378 "int8(int8 value)" `183 
f N "spi_data_is_in2" 1 379 ""
f B "spi_data_is_in2" 1 379 "int8()" `185  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 381 "0x00"
d G "SPI_MASTER" 1 382 "0x20"
d G "SPI_SLAVE" 1 383 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 384 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 385 "0x00"
d G "SPI_CLK_DIV_4" 1 386 "0x00"
d G "SPI_CLK_DIV_16" 1 387 "0x01"
d G "SPI_CLK_DIV_64" 1 388 "0x02"
d G "SPI_CLK_T2" 1 389 "0x03"
d G "SPI_SS_DISABLED" 1 390 "0x01"
d G "SPI_XMIT_L_TO_H" 1 392 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 393 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 395 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 396 "0x8000"
d G "SPI_L_TO_H" 1 399 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 400 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 1 2 "FUNCTION"
f N "setup_uart" 1 404 ""
v L "baud" 1 404 "int32" `187 
f B "setup_uart" 1 404 "void(int32 baud)" `186 
f N "setup_uart" 1 405 ""
v L "baud" 1 405 "int32" `189 
v L "stream" 1 405 "int8" `190 
f B "setup_uart" 1 405 "void(int32 baud,int8 stream)" `188 
f N "setup_uart" 1 406 ""
v L "baud" 1 406 "int32" `192 
v L "stream" 1 406 "int8" `193 
v L "clock" 1 406 "int32" `194 
f B "setup_uart" 1 406 "void(int32 baud,int8 stream,int32 clock)" `191 
f N "set_uart_speed" 1 407 ""
v L "baud" 1 407 "int32" `196 
f B "set_uart_speed" 1 407 "void(int32 baud)" `195 
f N "set_uart_speed" 1 408 ""
v L "baud" 1 408 "int32" `198 
v L "stream" 1 408 "int8" `199 
f B "set_uart_speed" 1 408 "void(int32 baud,int8 stream)" `197 
f N "set_uart_speed" 1 409 ""
v L "baud" 1 409 "int32" `201 
v L "stream" 1 409 "int8" `202 
v L "clock" 1 409 "int32" `203 
f B "set_uart_speed" 1 409 "void(int32 baud,int8 stream,int32 clock)" `200  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 413 "2"
d G "UART_DATA" 1 414 "4"
d G "UART_AUTODETECT" 1 415 "8"
d G "UART_AUTODETECT_NOWAIT" 1 416 "9"
d G "UART_WAKEUP_ON_RDA" 1 417 "10"
d G "UART_SEND_BREAK" 1 418 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
f N "setup_comparator" 1 422 ""
v L "mode" 1 422 "int32" `205 
f B "setup_comparator" 1 422 "void(int32 mode)" `204  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 424 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 425 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 426 "0xbcf05"
d G "NC_NC_NC_NC" 1 427 "0x0ff07"
d G "A0_A3_A1_A2" 1 428 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 429 "0x9ef01"
d G "A0_VR_A1_VR" 1 430 "0x3ff06"
d G "A3_VR_A2_VR" 1 431 "0xcff0e"
d G "CP1_INVERT" 1 432 "0x0000010"
d G "CP2_INVERT" 1 433 "0x0000020"
c L "setup_comparator" 1 1 2 "FUNCTION"
f N "setup_vref" 1 440 ""
v L "mode" 1 440 "int8" `209 
f B "setup_vref" 1 440 "void(int8 mode)" `208  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 442 "0xa0"
d G "VREF_HIGH" 1 443 "0x80"
d G "VREF_F5" 1 445 "0x40"
d G "VREF_COMP" 1 446 "0x10"
c L "setup_vref" 1 1 2 "FUNCTION"
f N "setup_low_volt_detect" 1 450 ""
v L "mode" 1 450 "int8" `211 
f B "setup_low_volt_detect" 1 450 "void(int8 mode)" `210  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 452 "0x1F"
d G "LVD_45" 1 453 "0x1E"
d G "LVD_42" 1 454 "0x1D"
d G "LVD_40" 1 455 "0x1C"
d G "LVD_38" 1 456 "0x1B"
d G "LVD_36" 1 457 "0x1A"
d G "LVD_35" 1 458 "0x19"
d G "LVD_33" 1 459 "0x18"
d G "LVD_30" 1 460 "0x17"
d G "LVD_28" 1 461 "0x16"
d G "LVD_27" 1 462 "0x15"
d G "LVD_25" 1 463 "0x14"
d G "LVD_24" 1 464 "0x13"
d G "LVD_23" 1 465 "0x12"
d G "LVD_22" 1 466 "0x11"
d G "LVD_21" 1 467 "0x10"
d G "LVD_TRIGGER_BELOW" 1 469 "0"
d G "LVD_TRIGGER_ABOVE" 1 470 "0x80"
c L "setup_low_volt_detect" 1 1 2 "FUNCTION"
f N "setup_oscillator" 1 475 ""
v L "mode" 1 475 "int8" `213 
f B "setup_oscillator" 1 475 "int8(int8 mode)" `212 
f N "setup_oscillator" 1 476 ""
v L "mode" 1 476 "int8" `215 
v L "tune" 1 476 "sint8" `216 
f B "setup_oscillator" 1 476 "int8(int8 mode,sint8 tune)" `214  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 479 "0"
d G "OSC_125KHZ" 1 480 "0x10"
d G "OSC_250KHZ" 1 481 "0x20"
d G "OSC_500KHZ" 1 482 "0x30"
d G "OSC_1MHZ" 1 483 "0x40"
d G "OSC_2MHZ" 1 484 "0x50"
d G "OSC_4MHZ" 1 485 "0x60"
d G "OSC_8MHZ" 1 486 "0x70"
d G "OSC_16MHZ" 1 487 "0x4060"
d G "OSC_32MHZ" 1 488 "0x4070"
d G "OSC_TIMER1" 1 490 "1"
d G "OSC_INTRC" 1 491 "2"
d G "OSC_NORMAL" 1 492 "0"
d G "OSC_IDLE_MODE" 1 494 "0x80"
d G "OSC_31250" 1 495 "0x8000"
d G "OSC_PLL_ON" 1 496 "0x4000"
d G "OSC_PLL_OFF" 1 497 "0"
d G "OSC_STATE_STABLE" 1 501 "4"
d G "OSC_STATE_EXT_RUNNING" 1 502 "8"
c L "setup_oscillator" 1 1 4 "FUNCTION"
f N "setup_adc" 1 509 ""
v L "mode" 1 509 "int16" `218 
f B "setup_adc" 1 509 "void(int16 mode)" `217 
f N "read_adc" 1 510 ""
f B "read_adc" 1 510 "int8()" `219 
f N "read_adc" 1 511 ""
v L "mode" 1 511 "int8" `221 
f B "read_adc" 1 511 "int8(int8 mode)" `220 
f N "read_adc" 1 512 ""
f G "read_adc" 1 512 "int16()" `222 
f N "read_adc" 1 513 ""
v L "mode" 1 513 "int8" `223 
f G "read_adc" 1 513 "int16(int8 mode,int8 pins)" `222 
f N "adc_done" 1 514 ""
f B "adc_done" 1 514 "int8(int8 mode,int8 pins)" `222  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 516 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 517 "0x100"
d G "ADC_CLOCK_DIV_4" 1 518 "0x04"
d G "ADC_CLOCK_DIV_8" 1 519 "0x01"
d G "ADC_CLOCK_DIV_16" 1 520 "0x05"
d G "ADC_CLOCK_DIV_32" 1 521 "0x02"
d G "ADC_CLOCK_DIV_64" 1 522 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 523 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 525 "0x00"
d G "ADC_TAD_MUL_2" 1 526 "0x08"
d G "ADC_TAD_MUL_4" 1 527 "0x10"
d G "ADC_TAD_MUL_6" 1 528 "0x18"
d G "ADC_TAD_MUL_8" 1 529 "0x20"
d G "ADC_TAD_MUL_12" 1 530 "0x28"
d G "ADC_TAD_MUL_16" 1 531 "0x30"
d G "ADC_TAD_MUL_20" 1 532 "0x38"
c L "adc_done" 1 1 1 "FUNCTION"
f N "setup_adc_ports" 1 535 ""
v L "pins" 1 535 "int8" `224 
f B "setup_adc_ports" 1 535 "void(int8 pins)" `223 
f N "setup_adc_ports" 1 536 ""
v L "pins" 1 536 "int8" `226 
v L "reference" 1 536 "int8" `227 
f B "setup_adc_ports" 1 536 "void(int8 pins,int8 reference)" `225 
f N "set_analog_pins" 1 537 ""
v L "pins" 1 537 "int8" `229 
f B "set_analog_pins" 1 537 "void(int8 pins)" `228 
f N "set_analog_pins" 1 538 ""
v L "pins" 1 538 "int8" `231 
v L "reference" 1 538 "int8" `232 
f B "set_analog_pins" 1 538 "void(int8 pins,int8 reference)" `230 
f N "set_adc_channel" 1 539 ""
v L "channel" 1 539 "int8" `234 
f B "set_adc_channel" 1 539 "void(int8 channel)" `233  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 542 "0x0F" "None"
d G "ALL_ANALOG" 1 543 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 544 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 545 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 546 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 547 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 548 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 549 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 550 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 551 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 552 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 553 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 554 "0x0D" "A0 A1"
d G "AN0" 1 555 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 556 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 557 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 558 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 559 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 560 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 561 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 562 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 563 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 564 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 565 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 566 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 567 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 570 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 571 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 572 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 573 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 576 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 577 "1"
d G "ADC_READ_ONLY" 1 578 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
f N "abs" 1 584 ""
v L "x" 1 584 "sint8" `236 
f B "abs" 1 584 "sint8(sint8 x)" `235 
f N "abs" 1 585 ""
v L "x" 1 585 "sint16" `238 
f B "abs" 1 585 "sint16(sint16 x)" `237 
f N "abs" 1 586 ""
v L "x" 1 586 "sint32" `240 
f B "abs" 1 586 "sint32(sint32 x)" `239 
f N "abs" 1 587 ""
v L "x" 1 587 "float" `242 
f B "abs" 1 587 "float(float x)" `241 
f N "_mul" 1 588 ""
v L "??65535" 1 588 "int8" `244 
v L "??65535" 1 588 "int8" `245 
f B "_mul" 1 588 "int16(int8 ,int8 )" `243 
f N "_mul" 1 589 ""
v L "??65535" 1 589 "sint8" `247 
v L "??65535" 1 589 "sint8" `248 
f B "_mul" 1 589 "sint16(sint8 ,sint8 )" `246 
f N "_mul" 1 590 ""
v L "??65535" 1 590 "int16" `250 
v L "??65535" 1 590 "int16" `251 
f B "_mul" 1 590 "int32(int16 ,int16 )" `249 
f N "_mul" 1 591 ""
v L "??65535" 1 591 "sint16" `253 
v L "??65535" 1 591 "sint16" `254 
f B "_mul" 1 591 "sint32(sint16 ,sint16 )" `252  "Memory Manipulation Prototypes:"
f N "read_bank" 1 594 ""
v L "bank" 1 594 "int8" `256 
v L "offset" 1 594 "int8" `257 
f B "read_bank" 1 594 "int8(int8 bank,int8 offset)" `255 
f N "write_bank" 1 595 ""
v L "bank" 1 595 "int8" `259 
v L "offset" 1 595 "int8" `260 
v L "value" 1 595 "int8" `261 
f B "write_bank" 1 595 "void(int8 bank,int8 offset,int8 value)" `258 
f N "strcpy" 1 596 ""
v L "dest" 1 596 "*int8" `263 
v L "src" 1 596 "*int8" `264 
f B "strcpy" 1 596 "void(*int8 dest,*int8 src)" `262 
f N "memset" 1 597 ""
v L "destination" 1 597 "*int8" `266 
v L "value" 1 597 "int8" `267 
v L "num" 1 597 "int16" `268 
f B "memset" 1 597 "void(*int8 destination,int8 value,int16 num)" `265 
f N "memcpy" 1 598 ""
v L "destination" 1 598 "*int8" `270 
v L "source" 1 598 "*int8" `271 
v L "num" 1 598 "int16" `272 
f B "memcpy" 1 598 "void(*int8 destination,*int8 source,int16 num)" `269  "String Prototypes:"
f N "toupper" 1 601 ""
v L "cvalue" 1 601 "int8" `274 
f B "toupper" 1 601 "int8(int8 cvalue)" `273 
f N "tolower" 1 602 ""
v L "cvalue" 1 602 "int8" `276 
f B "tolower" 1 602 "int8(int8 cvalue)" `275 
f N "sprintf" 1 603 ""
v L "string" 1 603 "*int8" `278 
v L "cstring" 1 603 "*int8" `279 
f B "sprintf" 1 603 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `277  "Data Manipulators Prototypes:"
f N "shift_left" 1 606 ""
v L "address" 1 606 "*int8" `282 
v L "bytes" 1 606 "int8" `283 
v L "value" 1 606 "int8" `284 
f B "shift_left" 1 606 "int8(*int8 address,int8 bytes,int8 value)" `281 
f N "shift_right" 1 607 ""
v L "address" 1 607 "*int8" `286 
v L "bytes" 1 607 "int8" `287 
v L "value" 1 607 "int8" `288 
f B "shift_right" 1 607 "int8(*int8 address,int8 bytes,int8 value)" `285 
f N "rotate_left" 1 608 ""
v L "address" 1 608 "*int8" `290 
v L "bytes" 1 608 "int8" `291 
f B "rotate_left" 1 608 "void(*int8 address,int8 bytes)" `289 
f N "rotate_right" 1 609 ""
v L "address" 1 609 "*int8" `293 
v L "bytes" 1 609 "int8" `294 
f B "rotate_right" 1 609 "void(*int8 address,int8 bytes)" `292 
f N "swap" 1 610 ""
v L "value" 1 610 "int8" `296 
f B "swap" 1 610 "void(int8 value)" `295 
f N "make8" 1 611 ""
v L "var" 1 611 "int16" `298 
v L "offset" 1 611 "int8" `299 
f B "make8" 1 611 "int8(int16 var,int8 offset)" `297 
f N "make8" 1 612 ""
v L "var" 1 612 "int32" `301 
v L "offset" 1 612 "int8" `302 
f B "make8" 1 612 "int8(int32 var,int8 offset)" `300 
f N "make16" 1 613 ""
v L "varhigh" 1 613 "int8" `304 
v L "varlow" 1 613 "int8" `305 
f B "make16" 1 613 "int16(int8 varhigh,int8 varlow)" `303 
f N "make32" 1 614 ""
v L "var1" 1 614 "int16" `307 
f B "make32" 1 614 "int32(int16 var1)" `306 
f N "make32" 1 615 ""
v L "var1" 1 615 "int16" `309 
v L "var2" 1 615 "int16" `310 
f B "make32" 1 615 "int32(int16 var1,int16 var2)" `308 
f N "make32" 1 616 ""
v L "var1" 1 616 "int16" `312 
v L "var2" 1 616 "int8" `313 
f B "make32" 1 616 "int32(int16 var1,int8 var2)" `311 
f N "make32" 1 617 ""
v L "var1" 1 617 "int16" `315 
v L "var2" 1 617 "int8" `316 
v L "var3" 1 617 "int8" `317 
f B "make32" 1 617 "int32(int16 var1,int8 var2,int8 var3)" `314 
f N "make32" 1 618 ""
v L "var1" 1 618 "int8" `319 
f B "make32" 1 618 "int32(int8 var1)" `318 
f N "make32" 1 619 ""
v L "var1" 1 619 "int8" `321 
v L "var2" 1 619 "int8" `322 
f B "make32" 1 619 "int32(int8 var1,int8 var2)" `320 
f N "make32" 1 620 ""
v L "var1" 1 620 "int8" `324 
v L "var2" 1 620 "int8" `325 
v L "var3" 1 620 "int8" `326 
f B "make32" 1 620 "int32(int8 var1,int8 var2,int8 var3)" `323 
f N "make32" 1 621 ""
v L "var1" 1 621 "int8" `328 
v L "var2" 1 621 "int8" `329 
v L "var3" 1 621 "int8" `330 
v L "var4" 1 621 "int8" `331 
f B "make32" 1 621 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `327 
f N "make32" 1 622 ""
v L "var1" 1 622 "int8" `333 
v L "var2" 1 622 "int16" `334 
f B "make32" 1 622 "int32(int8 var1,int16 var2)" `332 
f N "make32" 1 623 ""
v L "var1" 1 623 "int8" `336 
v L "var2" 1 623 "int16" `337 
v L "var3" 1 623 "int8" `338 
f B "make32" 1 623 "int32(int8 var1,int16 var2,int8 var3)" `335 
f N "make32" 1 624 ""
v L "var1" 1 624 "int8" `340 
v L "var2" 1 624 "int8" `341 
v L "var3" 1 624 "int16" `342 
f B "make32" 1 624 "int32(int8 var1,int8 var2,int16 var3)" `339 
f N "bit_set" 1 625 ""
v L "var" 1 625 "int8" `344 
v L "bit" 1 625 "int8" `345 
f B "bit_set" 1 625 "void(int8 var,int8 bit)" `343 
f N "bit_set" 1 626 ""
v L "var" 1 626 "int16" `347 
v L "bit" 1 626 "int8" `348 
f B "bit_set" 1 626 "void(int16 var,int8 bit)" `346 
f N "bit_set" 1 627 ""
v L "var" 1 627 "int32" `350 
v L "bit" 1 627 "int8" `351 
f B "bit_set" 1 627 "void(int32 var,int8 bit)" `349 
f N "bit_clear" 1 628 ""
v L "var" 1 628 "int8" `353 
v L "bit" 1 628 "int8" `354 
f B "bit_clear" 1 628 "void(int8 var,int8 bit)" `352 
f N "bit_clear" 1 629 ""
v L "var" 1 629 "int16" `356 
v L "bit" 1 629 "int8" `357 
f B "bit_clear" 1 629 "void(int16 var,int8 bit)" `355 
f N "bit_clear" 1 630 ""
v L "var" 1 630 "int32" `359 
v L "bit" 1 630 "int8" `360 
f B "bit_clear" 1 630 "void(int32 var,int8 bit)" `358 
f N "bit_test" 1 631 ""
v L "var" 1 631 "int8" `362 
v L "bit" 1 631 "int8" `363 
f B "bit_test" 1 631 "int8(int8 var,int8 bit)" `361 
f N "bit_test" 1 632 ""
v L "var" 1 632 "int16" `365 
v L "bit" 1 632 "int8" `366 
f B "bit_test" 1 632 "int8(int16 var,int8 bit)" `364 
f N "bit_test" 1 633 ""
v L "var" 1 633 "int32" `368 
v L "bit" 1 633 "int8" `369 
f B "bit_test" 1 633 "int8(int32 var,int8 bit)" `367  "#use delay() Prototypes:"
f N "delay_cycles" 1 636 ""
v L "count" 1 636 "int8" `371 
f B "delay_cycles" 1 636 "void(int8 count)" `370 
f N "delay_ms" 1 637 ""
v L "time" 1 637 "int16" `373 
f B "delay_ms" 1 637 "void(int16 time)" `372 
f N "delay_us" 1 638 ""
v L "time" 1 638 "int16" `375 
f B "delay_us" 1 638 "void(int16 time)" `374  "#use rs232() Prototypes:"
f N "putchar" 1 641 ""
v L "cdata" 1 641 "int8" `377 
f B "putchar" 1 641 "void(int8 cdata)" `376 
f N "putchar" 1 642 ""
v L "cdata" 1 642 "int8" `379 
v L "stream" 1 642 "int8" `380 
f B "putchar" 1 642 "void(int8 cdata,int8 stream)" `378 
f N "puts" 1 643 ""
v L "string" 1 643 "*int8" `382 
f B "puts" 1 643 "void(*int8 string)" `381 
f N "puts" 1 644 ""
v L "string" 1 644 "*int8" `384 
v L "stream" 1 644 "int8" `385 
f B "puts" 1 644 "void(*int8 string,int8 stream)" `383 
f N "getch" 1 645 ""
f B "getch" 1 645 "int8()" `386 
f N "getch" 1 646 ""
v L "stream" 1 646 "int8" `388 
f B "getch" 1 646 "int8(int8 stream)" `387 
f N "gets" 1 647 ""
v L "string" 1 647 "*int8" `390 
f B "gets" 1 647 "void(*int8 string)" `389 
f N "gets" 1 648 ""
v L "string" 1 648 "*int8" `392 
v L "stream" 1 648 "int8" `393 
f B "gets" 1 648 "void(*int8 string,int8 stream)" `391 
f N "kbhit" 1 649 ""
f B "kbhit" 1 649 "int8()" `394 
f N "kbhit" 1 650 ""
v L "stream" 1 650 "int8" `396 
f B "kbhit" 1 650 "int8(int8 stream)" `395 
f N "printf" 1 651 ""
v L "string" 1 651 "*int8" `398 
f B "printf" 1 651 "void(*int8 string,*int8 _VA_LIST)" `397 
f N "fprintf" 1 652 ""
v L "stream" 1 652 "int8" `401 
v L "string" 1 652 "*int8" `402 
f B "fprintf" 1 652 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `400 
f N "putc_send" 1 653 ""
f B "putc_send" 1 653 "void()" `404 
f N "fputc_send" 1 654 ""
v L "stream" 1 654 "int8" `406 
f B "fputc_send" 1 654 "void(int8 stream)" `405 
f N "rcv_buffer_full" 1 655 ""
f B "rcv_buffer_full" 1 655 "int8()" `407 
f N "rcv_buffer_full" 1 656 ""
v L "stream" 1 656 "int8" `409 
f B "rcv_buffer_full" 1 656 "int8(int8 stream)" `408 
f N "rcv_buffer_bytes" 1 657 ""
f B "rcv_buffer_bytes" 1 657 "int16()" `410 
f N "rcv_buffer_bytes" 1 658 ""
v L "stream" 1 658 "int8" `412 
f B "rcv_buffer_bytes" 1 658 "int16(int8 stream)" `411 
f N "tx_buffer_full" 1 659 ""
f B "tx_buffer_full" 1 659 "int8()" `413 
f N "tx_buffer_full" 1 660 ""
v L "stream" 1 660 "int8" `415 
f B "tx_buffer_full" 1 660 "int8(int8 stream)" `414 
f N "tx_buffer_bytes" 1 661 ""
f B "tx_buffer_bytes" 1 661 "int16()" `416 
f N "tx_buffer_bytes" 1 662 ""
v L "stream" 1 662 "int8" `418 
f B "tx_buffer_bytes" 1 662 "int16(int8 stream)" `417  "#use i2c() Prototypes:"
f N "i2c_read" 1 665 ""
f B "i2c_read" 1 665 "int8()" `419 
f N "i2c_read" 1 666 ""
v L "ack" 1 666 "int8" `421 
f B "i2c_read" 1 666 "int8(int8 ack)" `420 
f N "i2c_read" 1 667 ""
v L "stream" 1 667 "int8" `423 
v L "ack" 1 667 "int8" `424 
f B "i2c_read" 1 667 "int8(int8 stream,int8 ack)" `422 
f N "i2c_write" 1 668 ""
v L "data" 1 668 "int8" `426 
f B "i2c_write" 1 668 "int8(int8 data)" `425 
f N "i2c_write" 1 669 ""
v L "stream" 1 669 "int8" `428 
v L "data" 1 669 "int8" `429 
f B "i2c_write" 1 669 "int8(int8 stream,int8 data)" `427 
f N "i2c_start" 1 670 ""
f B "i2c_start" 1 670 "void()" `430 
f N "i2c_start" 1 671 ""
v L "stream" 1 671 "int8" `432 
f B "i2c_start" 1 671 "void(int8 stream)" `431 
f N "i2c_start" 1 672 ""
v L "stream" 1 672 "int8" `434 
v L "restart" 1 672 "int8" `435 
f B "i2c_start" 1 672 "void(int8 stream,int8 restart)" `433 
f N "i2c_stop" 1 673 ""
f B "i2c_stop" 1 673 "void()" `436 
f N "i2c_stop" 1 674 ""
v L "stream" 1 674 "int8" `438 
f B "i2c_stop" 1 674 "void(int8 stream)" `437 
f N "i2c_isr_state" 1 675 ""
f B "i2c_isr_state" 1 675 "int8()" `439 
f N "i2c_slaveaddr" 1 676 ""
v L "addr" 1 676 "int8" `441 
f B "i2c_slaveaddr" 1 676 "void(int8 addr)" `440 
f N "i2c_slaveaddr" 1 677 ""
v L "stream" 1 677 "int8" `443 
v L "addr" 1 677 "int8" `444 
f B "i2c_slaveaddr" 1 677 "void(int8 stream,int8 addr)" `442 
f N "i2c_poll" 1 678 ""
f B "i2c_poll" 1 678 "int8()" `445 
f N "i2c_poll" 1 679 ""
v L "stream" 1 679 "int8" `447 
f B "i2c_poll" 1 679 "int8(int8 stream)" `446 
f N "i2c_init" 1 680 ""
v L "baud" 1 680 "int32" `449 
f B "i2c_init" 1 680 "void(int32 baud)" `448 
f N "i2c_init" 1 681 ""
v L "stream" 1 681 "int8" `451 
v L "baud" 1 681 "int32" `452 
f B "i2c_init" 1 681 "void(int8 stream,int32 baud)" `450  "#use spi() Prototypes:"
f N "spi_xfer" 1 684 ""
f B "spi_xfer" 1 684 "int8()" `453 
f N "spi_xfer" 1 685 ""
f G "spi_xfer" 1 685 "int16(int8 data)" `454 
f N "spi_xfer" 1 686 ""
f G "spi_xfer" 1 686 "int32(int8 data)" `454 
f N "spi_xfer" 1 687 ""
v L "data" 1 687 "int8" `455 
f B "spi_xfer" 1 687 "int8(int8 data)" `454 
f N "spi_xfer" 1 688 ""
v L "data" 1 688 "int16" `457 
f B "spi_xfer" 1 688 "int16(int16 data)" `456 
f N "spi_xfer" 1 689 ""
v L "data" 1 689 "int32" `459 
f B "spi_xfer" 1 689 "int32(int32 data)" `458 
f N "spi_xfer" 1 690 ""
v L "stream" 1 690 "int8" `461 
v L "data" 1 690 "int8" `462 
f B "spi_xfer" 1 690 "int8(int8 stream,int8 data)" `460 
f N "spi_xfer" 1 691 ""
v L "stream" 1 691 "int8" `464 
v L "data" 1 691 "int16" `465 
f B "spi_xfer" 1 691 "int16(int8 stream,int16 data)" `463 
f N "spi_xfer" 1 692 ""
v L "stream" 1 692 "int8" `467 
v L "data" 1 692 "int32" `468 
f B "spi_xfer" 1 692 "int32(int8 stream,int32 data)" `466 
f N "spi_xfer" 1 693 ""
v L "stream" 1 693 "int8" `470 
v L "data" 1 693 "int8" `471 
v L "bits" 1 693 "int8" `472 
f B "spi_xfer" 1 693 "int8(int8 stream,int8 data,int8 bits)" `469 
f N "spi_xfer" 1 694 ""
v L "stream" 1 694 "int8" `474 
v L "data" 1 694 "int16" `475 
v L "bits" 1 694 "int8" `476 
f B "spi_xfer" 1 694 "int16(int8 stream,int16 data,int8 bits)" `473 
f N "spi_xfer" 1 695 ""
v L "stream" 1 695 "int8" `478 
v L "data" 1 695 "int32" `479 
v L "bits" 1 695 "int8" `480 
f B "spi_xfer" 1 695 "int32(int8 stream,int32 data,int8 bits)" `477 
f N "spi_init" 1 696 ""
v L "baud" 1 696 "int32" `482 
f B "spi_init" 1 696 "void(int32 baud)" `481 
f N "spi_init" 1 697 ""
v L "stream" 1 697 "int8" `484 
v L "baud" 1 697 "int32" `485 
f B "spi_init" 1 697 "void(int8 stream,int32 baud)" `483 
f N "spi_speed" 1 698 ""
v L "baud" 1 698 "int32" `487 
f B "spi_speed" 1 698 "void(int32 baud)" `486 
f N "spi_speed" 1 699 ""
v L "stream" 1 699 "int8" `489 
v L "baud" 1 699 "int32" `490 
f B "spi_speed" 1 699 "void(int8 stream,int32 baud)" `488 
f N "spi_speed" 1 700 ""
v L "stream" 1 700 "int8" `492 
v L "baud" 1 700 "int32" `493 
v L "clock" 1 700 "int32" `494 
f B "spi_speed" 1 700 "void(int8 stream,int32 baud,int32 clock)" `491 
f N "spi_prewrite" 1 701 ""
v L "data" 1 701 "int8" `496 
f B "spi_prewrite" 1 701 "void(int8 data)" `495 
f N "spi_prewrite" 1 702 ""
v L "data" 1 702 "int16" `498 
f B "spi_prewrite" 1 702 "void(int16 data)" `497 
f N "spi_prewrite" 1 703 ""
v L "data" 1 703 "int32" `500 
f B "spi_prewrite" 1 703 "void(int32 data)" `499 
f N "spi_prewrite" 1 704 ""
v L "??65535" 1 704 "int8" `502 
v L "data" 1 704 "int8" `503 
f B "spi_prewrite" 1 704 "void(int8 ,int8 data)" `501 
f N "spi_prewrite" 1 705 ""
v L "??65535" 1 705 "int8" `505 
v L "data" 1 705 "int16" `506 
f B "spi_prewrite" 1 705 "void(int8 ,int16 data)" `504 
f N "spi_prewrite" 1 706 ""
v L "??65535" 1 706 "int8" `508 
v L "data" 1 706 "int32" `509 
f B "spi_prewrite" 1 706 "void(int8 ,int32 data)" `507 
f N "spi_xfer_in" 1 707 ""
f B "spi_xfer_in" 1 707 "int8()" `510 
f N "spi_xfer_in" 1 708 ""
f G "spi_xfer_in" 1 708 "int16(int8 bits)" `511 
f N "spi_xfer_in" 1 709 ""
f G "spi_xfer_in" 1 709 "int32(int8 bits)" `511 
f N "spi_xfer_in" 1 710 ""
v L "bits" 1 710 "int8" `512 
f B "spi_xfer_in" 1 710 "int8(int8 bits)" `511 
f N "spi_xfer_in" 1 711 ""
v L "bits" 1 711 "int8" `514 
f G "spi_xfer_in" 1 711 "int16(int8 bits,int8 bits)" `513 
f N "spi_xfer_in" 1 712 ""
v L "bits" 1 712 "int8" `514 
f G "spi_xfer_in" 1 712 "int32(int8 bits,int8 bits)" `513 
f N "spi_xfer_in" 1 713 ""
v L "stream" 1 713 "int8" `514 
v L "bits" 1 713 "int8" `515 
f B "spi_xfer_in" 1 713 "int8(int8 stream,int8 bits)" `513 
f N "spi_xfer_in" 1 714 ""
v L "stream" 1 714 "int8" `514 
v L "bits" 1 714 "int8" `518 
f G "spi_xfer_in" 1 714 "int16(int8 stream,int8 bits,int8 task)" `516 
f N "spi_xfer_in" 1 715 ""
v L "stream" 1 715 "int8" `514 
v L "bits" 1 715 "int8" `518 
f G "spi_xfer_in" 1 715 "int32(int8 stream,int8 bits,int8 task)" `516  "#use rtos() Prototypes:"
f N "rtos_run" 1 718 ""
f B "rtos_run" 1 718 "void(int8 stream,int8 bits,int8 task)" `516 
f N "rtos_yield" 1 719 ""
f B "rtos_yield" 1 719 "void(int8 bits,int8 task)" `517 
f N "rtos_enable" 1 720 ""
v L "task" 1 720 "int8" `519 
f B "rtos_enable" 1 720 "void(int8 task)" `518 
f N "rtos_disable" 1 721 ""
v L "task" 1 721 "int8" `521 
f B "rtos_disable" 1 721 "void(int8 task)" `520 
f N "rtos_terminate" 1 722 ""
f B "rtos_terminate" 1 722 "void()" `522 
f N "rtos_await" 1 723 ""
v L "flag" 1 723 "int8" `524 
f B "rtos_await" 1 723 "void(int8 flag)" `523 
f N "rtos_wait" 1 724 ""
v L "sem" 1 724 "int8" `526 
f B "rtos_wait" 1 724 "void(int8 sem)" `525 
f N "rtos_signal" 1 725 ""
v L "sem" 1 725 "int8" `528 
f B "rtos_signal" 1 725 "void(int8 sem)" `527 
f N "rtos_msg_send" 1 726 ""
v L "task" 1 726 "int8" `530 
v L "msg" 1 726 "int8" `531 
f B "rtos_msg_send" 1 726 "void(int8 task,int8 msg)" `529 
f N "rtos_msg_read" 1 727 ""
f B "rtos_msg_read" 1 727 "int8()" `532 
f N "rtos_msg_poll" 1 728 ""
f B "rtos_msg_poll" 1 728 "int8()" `533 
f N "rtos_overrun" 1 729 ""
v L "task" 1 729 "int8" `535 
f B "rtos_overrun" 1 729 "int8(int8 task)" `534 
f N "rtos_stats" 1 730 ""
v L "task" 1 730 "int8" `537 
v L "stat" 1 730 "*int8" `538 
f B "rtos_stats" 1 730 "void(int8 task,*int8 stat)" `536  "#use timer() Prototypes:"
f N "get_ticks" 1 733 ""
f B "get_ticks" 1 733 "int8()" `539 
f N "get_ticks" 1 734 ""
f G "get_ticks" 1 734 "int16(int8 stream)" `540 
f N "get_ticks" 1 735 ""
f G "get_ticks" 1 735 "int32(int8 stream)" `540 
f N "get_ticks" 1 736 ""
v L "stream" 1 736 "int8" `541 
f B "get_ticks" 1 736 "int8(int8 stream)" `540 
f N "get_ticks" 1 737 ""
v L "stream" 1 737 "int8" `543 
f G "get_ticks" 1 737 "int16(int8 stream)" `542 
f N "get_ticks" 1 738 ""
v L "stream" 1 738 "int8" `543 
f G "get_ticks" 1 738 "int32(int8 stream)" `542 
f N "set_ticks" 1 739 ""
v L "value" 1 739 "int8" `543 
f B "set_ticks" 1 739 "void(int8 value)" `542 
f N "set_ticks" 1 740 ""
v L "value" 1 740 "int16" `545 
f B "set_ticks" 1 740 "void(int16 value)" `544 
f N "set_ticks" 1 741 ""
v L "value" 1 741 "int32" `547 
f B "set_ticks" 1 741 "void(int32 value)" `546 
f N "set_ticks" 1 742 ""
v L "stream" 1 742 "int8" `549 
v L "value" 1 742 "int8" `550 
f B "set_ticks" 1 742 "void(int8 stream,int8 value)" `548 
f N "set_ticks" 1 743 ""
v L "stream" 1 743 "int8" `552 
v L "value" 1 743 "int16" `553 
f B "set_ticks" 1 743 "void(int8 stream,int16 value)" `551 
f N "set_ticks" 1 744 ""
v L "stream" 1 744 "int8" `555 
v L "value" 1 744 "int32" `556 
f B "set_ticks" 1 744 "void(int8 stream,int32 value)" `554  "#use pwm() Prototypes:"
f N "pwm_on" 1 747 ""
f B "pwm_on" 1 747 "void()" `557 
f N "pwm_on" 1 748 ""
v L "stream" 1 748 "int8" `559 
f B "pwm_on" 1 748 "void(int8 stream)" `558 
f N "pwm_off" 1 749 ""
f B "pwm_off" 1 749 "void()" `560 
f N "pwm_off" 1 750 ""
v L "stream" 1 750 "int8" `562 
f B "pwm_off" 1 750 "void(int8 stream)" `561 
f N "pwm_set_duty" 1 751 ""
v L "duty" 1 751 "int16" `564 
f B "pwm_set_duty" 1 751 "void(int16 duty)" `563 
f N "pwm_set_duty" 1 752 ""
v L "stream" 1 752 "int8" `566 
v L "duty" 1 752 "int16" `567 
f B "pwm_set_duty" 1 752 "void(int8 stream,int16 duty)" `565 
f N "pwm_set_duty_percent" 1 753 ""
v L "percent" 1 753 "int16" `569 
f B "pwm_set_duty_percent" 1 753 "void(int16 percent)" `568 
f N "pwm_set_duty_percent" 1 754 ""
v L "stream" 1 754 "int8" `571 
v L "percent" 1 754 "int16" `572 
f B "pwm_set_duty_percent" 1 754 "void(int8 stream,int16 percent)" `570 
f N "pwm_set_frequency" 1 755 ""
v L "frequency" 1 755 "int32" `574 
f B "pwm_set_frequency" 1 755 "void(int32 frequency)" `573 
f N "pwm_set_frequency" 1 756 ""
v L "stream" 1 756 "int8" `576 
v L "frequency" 1 756 "int32" `577 
f B "pwm_set_frequency" 1 756 "void(int8 stream,int32 frequency)" `575  "#use capture() Prototypes:"
f N "get_capture_time" 1 759 ""
f B "get_capture_time" 1 759 "int16()" `578 
f N "get_capture_time" 1 760 ""
v L "stream" 1 760 "int8" `580 
f B "get_capture_time" 1 760 "int16(int8 stream)" `579 
f N "get_capture_event" 1 761 ""
f B "get_capture_event" 1 761 "int8()" `581 
f N "get_capture_event" 1 762 ""
v L "stream" 1 762 "int8" `583 
f B "get_capture_event" 1 762 "int8(int8 stream)" `582  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 775 ""
v L "address" 1 775 "int16" `585 
f B "goto_address" 1 775 "void(int16 address)" `584 
f N "label_address" 1 776 ""
v L "label" 1 776 "int16" `587 
f B "label_address" 1 776 "int16(int16 label)" `586  "Program Memory Prototypes:"
f N "read_program_memory" 1 779 ""
v L "address" 1 779 "int16" `589 
v L "dataptr" 1 779 "*int8" `590 
v L "count" 1 779 "int16" `591 
f B "read_program_memory" 1 779 "void(int16 address,*int8 dataptr,int16 count)" `588 
f N "read_program_eeprom" 1 780 ""
v L "address" 1 780 "int16" `593 
f B "read_program_eeprom" 1 780 "int16(int16 address)" `592 
f N "erase_program_eeprom" 1 781 ""
v L "address" 1 781 "int16" `595 
f B "erase_program_eeprom" 1 781 "void(int16 address,*int8 dataptr,int16 count)" `594 
f N "write_program_memory" 1 782 ""
v L "address" 1 782 "int16" `597 
v L "dataptr" 1 782 "*int8" `598 
v L "count" 1 782 "int16" `599 
f B "write_program_memory" 1 782 "void(int16 address,*int8 dataptr,int16 count,int16 data)" `596 
f N "write_program_eeprom" 1 783 ""
v L "address" 1 783 "int16" `601 
v L "data" 1 783 "int16" `602 
f B "write_program_eeprom" 1 783 "void(int16 address,int16 data)" `600  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 788 "unsigned int16"
f N "read_eeprom" 1 793 ""
v L "address" 1 793 "int16" `604 
f B "read_eeprom" 1 793 "int8(int16 address,int8 value)" `603 
f N "write_eeprom" 1 794 ""
v L "address" 1 794 "int16" `606 
v L "value" 1 794 "int8" `607 
f B "write_eeprom" 1 794 "void(int16 address,int8 value)" `605  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 801 ""
v L "interrupt" 1 801 "int32" `609 
f B "enable_interrupts" 1 801 "void(int32 interrupt)" `608 
f N "disable_interrupts" 1 802 ""
v L "interrupt" 1 802 "int32" `611 
f B "disable_interrupts" 1 802 "void(int32 interrupt)" `610 
f N "clear_interrupt" 1 803 ""
v L "interrupt" 1 803 "int32" `613 
f B "clear_interrupt" 1 803 "void(int32 interrupt)" `612 
f N "interrupt_active" 1 804 ""
v L "interrupt" 1 804 "int32" `615 
f B "interrupt_active" 1 804 "int8(int32 interrupt)" `614 
f N "interrupt_enabled" 1 805 ""
v L "interrupt" 1 805 "int32" `617 
f B "interrupt_enabled" 1 805 "int8(int32 interrupt,int8 edge)" `616 
f N "ext_int_edge" 1 806 ""
v L "source" 1 806 "int8" `619 
v L "edge" 1 806 "int8" `620 
f B "ext_int_edge" 1 806 "void(int8 source,int8 edge)" `618 
f N "jump_to_isr" 1 807 ""
v L "address" 1 807 "int16" `622 
f B "jump_to_isr" 1 807 "void(int16 address)" `621  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 809 "0x40"
d G "H_TO_L" 1 810 "0"
d G "GLOBAL" 1 812 "0xF2C0"
d G "PERIPH" 1 813 "0xF240"
d G "INT_RTCC" 1 814 "0x00F220"
d G "INT_TIMER0" 1 815 "0x00F220"
d G "INT_TIMER1" 1 816 "0x009D01"
d G "INT_TIMER2" 1 817 "0x009D02"
d G "INT_TIMER3" 1 818 "0x00A002"
d G "INT_EXT_L2H" 1 819 "0x5000F210"
d G "INT_EXT_H2L" 1 820 "0x6000F210"
d G "INT_EXT" 1 821 "0x00F210"
d G "INT_EXT1_L2H" 1 822 "0x5001F008"
d G "INT_EXT1_H2L" 1 823 "0x6001F008"
d G "INT_EXT1" 1 824 "0x00F008"
d G "INT_EXT2_L2H" 1 825 "0x5002F010"
d G "INT_EXT2_H2L" 1 826 "0x6002F010"
d G "INT_EXT2" 1 827 "0x00F010"
d G "INT_RB" 1 828 "0x00FFF208"
d G "INT_PSP" 1 829 "0x009D80"
d G "INT_AD" 1 830 "0x009D40"
d G "INT_RDA" 1 831 "0x009D20"
d G "INT_TBE" 1 832 "0x009D10"
d G "INT_SSP" 1 833 "0x009D08"
d G "INT_CCP1" 1 834 "0x009D04"
d G "INT_CCP2" 1 835 "0x00A001"
d G "INT_BUSCOL" 1 836 "0x00A008"
d G "INT_LOWVOLT" 1 837 "0x00A004"
d G "INT_COMP" 1 838 "0x00A040"
d G "INT_EEPROM" 1 839 "0x00A010"
d G "INT_OSCF" 1 840 "0x00A080"
D G "_STDLIB" 2 13 ""
D G "RAND_MAX" 2 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 2 26 "1"
T G "div_t" 2 34 "{sint8 quot,sint8 rem}" `638 
T G "ldiv_t" 2 39 "{sint16 quot,sint16 rem}" `642  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 24 "unsigned int16"
D G "wchar_t" 3 26 "char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 2 44 2 "FUNCTION"
C L "jump_to_isr" 2 47 1 "*"
C L "jump_to_isr" 2 47 1 "*"
F N "atoi" 2 51 ""
V L "s" 2 51 "*int8" `644 
f G "atoi" 2 51 "sint8(*int8 s)" `643  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 2 59 ""
V L "s" 2 59 "*int8" `646 
f G "atoi32" 2 59 "sint32(*int8 s,int8 base,*int8 s)" `645  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 2 47 2 "FUNCTION"
F N "itoa" 2 80 ""
V L "num" 2 80 "sint32" `648 
V L "base" 2 80 "int8" `649 
V L "s" 2 80 "*int8" `650 
f G "itoa" 2 80 "*int8(sint32 num,int8 base,*int8 s)" `647  "Standard template: signed int16  atol(char * s)"
C L "itoa" 2 82 1 "*"
C L "itoa" 2 82 1 "*"
F N "atol" 2 86 ""
V L "s" 2 86 "*int8" `652 
f G "atol" 2 86 "sint16(*int8 s,*int8 endptr,sint8 base)" `651  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
F N "strtol" 2 94 ""
V L "s" 2 94 "*int8" `654 
V L "endptr" 2 94 "*int8" `655 
V L "base" 2 94 "sint8" `656 
f G "strtol" 2 94 "sint16(*int8 s,*int8 endptr,sint8 base,*int8 endptr,sint8 base)" `653  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
F N "strtoul" 2 102 ""
V L "s" 2 102 "*int8" `658 
V L "endptr" 2 102 "*int8" `659 
V L "base" 2 102 "sint8" `660 
f G "strtoul" 2 102 "int16(*int8 s,*int8 endptr,sint8 base,??0 * endptr)" `657  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 2 96 2 "FUNCTION"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
F N "strtof" 2 111 ""
V L "s" 2 111 "*int8" `662 
V L "endptr" 2 111 "??0 *" `663 
f G "strtof" 2 111 "float(*int8 s,??0 * endptr,*int8 s)" `661  "provided for compatibility"
D G "strtof48" 2 117 "(s,e) strtof(s, e)"
D G "strtod" 2 118 "(s,e) strtof(s, e)"
C L "strtof" 2 104 1 "FUNCTION"
C L "strtof" 2 121 1 "*"
D G "atof" 2 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 2 121 1 "FUNCTION"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
F N "atoe" 2 150 ""
V L "s" 2 150 "*int8" `666 
f G "atoe" 2 150 "float(*int8 s,int32 seed)" `665  "Pseudo-random sequence generation functions"
C L "atoe" 2 144 1 "FUNCTION"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
F N "rand" 2 170 ""
f G "rand" 2 170 "int16()" `667  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
F N "srand" 2 192 ""
V L "seed" 2 192 "int32" `669 
f G "srand" 2 192 "void(int32 seed)" `668  "Memory management functions"
C L "srand" 2 172 3 "FUNCTION"
F N "system" 2 206 ""
V L "string" 2 206 "*int8" `671 
f G "system" 2 206 "sint8(*int8 string,sint8 denom)" `670  "Searching and sorting utilities"
C L "system" 2 172 1 "FUNCTION"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 4 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
D G "labs" 2 250 "abs"
F N "div" 2 252 ""
V L "numer" 2 252 "sint8" `673 
V L "denom" 2 252 "sint8" `674 
f G "div" 2 252 "div_t(sint8 numer,sint8 denom,sint16 denom)" `672 
F N "ldiv" 2 253 ""
V L "numer" 2 253 "sint16" `676 
V L "denom" 2 253 "sint16" `677 
f G "ldiv" 2 253 "ldiv_t(sint16 numer,sint16 denom,*void s2,int16 n)" `675  "Multibyte character functions"
C L "ldiv" 2 230 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 4 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 4 19 10 "FUNCTION"
F N "memmove" 4 34 ""
V L "s1" 4 34 "*void" `679 
V L "s2" 4 34 "*void" `680 
V L "n" 4 34 "int16" `681 
F G "memmove" 4 35 "*int8(*void s1,*void s2,int16 n)" `678 
V L "sc1" 4 36 "*int8" `682 
V L "sc2" 4 37 "*int8" `683 
D G "strcopy" 4 54 "strcpy"
F N "strncpy" 4 61 ""
V L "s1" 4 61 "*int8" `685 
V L "s2" 4 61 "*int8" `686 
V L "n" 4 61 "int16" `687 
F G "strncpy" 4 62 "*int8(*int8 s1,*int8 s2,int16 n,*int8 s1,*int8 s2)" `684 
V L "s" 4 63 "*int8" `688 
F N "strcat" 4 78 ""
V L "s1" 4 78 "*int8" `690 
V L "s2" 4 78 "*int8" `691 
F G "strcat" 4 79 "*int8(*int8 s1,*int8 s2,*int8 s1,*int8 s2,int16 n)" `689 
V L "s" 4 80 "*int8" `692 
F N "strncat" 4 96 ""
V L "s1" 4 96 "*int8" `694 
V L "s2" 4 96 "*int8" `695 
V L "n" 4 96 "int16" `696 
F G "strncat" 4 97 "*int8(*int8 s1,*int8 s2,int16 n,*void s1,*void s2,int16 n)" `693 
V L "s" 4 98 "*int8" `697 
C L "memcmp" 4 19 3 "FUNCTION"
F N "memcmp" 4 120 ""
V L "s1" 4 120 "*void" `699 
V L "s2" 4 120 "*void" `700 
V L "n" 4 120 "int16" `701 
F G "memcmp" 4 121 "sint8(*void s1,*void s2,int16 n)" `698 
V L "su1" 4 122 "*int8" `702 
V L "su2" 4 122 "*int8" `703 
C L "strcmp" 4 19 2 "FUNCTION"
F N "strcmp" 4 134 ""
V L "s1" 4 134 "*int8" `705 
V L "s2" 4 134 "*int8" `706 
F G "strcmp" 4 135 "sint8(*int8 s1,*int8 s2,*int8 s2)" `704 
C L "strcoll" 4 19 2 "FUNCTION"
F N "strcoll" 4 144 ""
V L "s1" 4 144 "*int8" `708 
V L "s2" 4 144 "*int8" `709 
F G "strcoll" 4 145 "sint8(*int8 s1,*int8 s2,*int8 s2,int16 n)" `707 
C L "strncmp" 4 19 4 "FUNCTION"
F N "strncmp" 4 157 ""
V L "s1" 4 157 "*int8" `711 
V L "s2" 4 157 "*int8" `712 
V L "n" 4 157 "int16" `713 
F G "strncmp" 4 158 "sint8(*int8 s1,*int8 s2,int16 n,*int8 s2,int16 n)" `710 
C L "strxfrm" 4 19 4 "FUNCTION"
F N "strxfrm" 4 170 ""
V L "s1" 4 170 "*int8" `715 
V L "s2" 4 170 "*int8" `716 
V L "n" 4 170 "int16" `717 
F G "strxfrm" 4 171 "int16(*int8 s1,*int8 s2,int16 n)" `714 
V L "c" 4 172 "int8" `718 
V L "n1" 4 173 "int8" `719 
C L "strxfrm" 4 19 1 "FUNCTION"
F N "memchr" 4 201 ""
V L "s" 4 201 "*void" `721 
V L "c" 4 201 "int8" `722 
V L "n" 4 201 "int16" `723 
F G "memchr" 4 202 "*int8(*void s,int8 c,int16 n)" `720 
V L "uc" 4 203 "int8" `724 
V L "su" 4 204 "*int8" `725 
F N "strchr" 4 215 ""
V L "s" 4 215 "*int8" `727 
V L "c" 4 215 "int8" `728 
F G "strchr" 4 216 "*int8(*int8 s,int8 c,*int8 s2)" `726 
C L "strcspn" 4 19 4 "FUNCTION"
F N "strcspn" 4 227 ""
V L "s1" 4 227 "*int8" `730 
V L "s2" 4 227 "*int8" `731 
F G "strcspn" 4 228 "int8(*int8 s1,*int8 s2)" `729 
V L "sc1" 4 229 "*int8" `732 
V L "sc2" 4 229 "*int8" `733 
F N "strpbrk" 4 242 ""
V L "s1" 4 242 "*int8" `735 
V L "s2" 4 242 "*int8" `736 
F G "strpbrk" 4 243 "*int8(*int8 s1,*int8 s2)" `734 
V L "sc1" 4 244 "*int8" `737 
V L "sc2" 4 244 "*int8" `738 
F N "strrchr" 4 257 ""
V L "s" 4 257 "*int8" `740 
V L "c" 4 257 "int8" `741 
F G "strrchr" 4 258 "*int8(*int8 s,int8 c,*int8 s1,*int8 s2)" `739 
V L "p" 4 259 "*int8" `742 
C L "strspn" 4 19 2 "FUNCTION"
F N "strspn" 4 272 ""
V L "s1" 4 272 "*int8" `744 
V L "s2" 4 272 "*int8" `745 
F G "strspn" 4 273 "int8(*int8 s1,*int8 s2)" `743 
V L "sc1" 4 274 "*int8" `746 
V L "sc2" 4 274 "*int8" `747 
F N "strstr" 4 291 ""
V L "s1" 4 291 "*int8" `749 
V L "s2" 4 291 "*int8" `750 
F G "strstr" 4 292 "*int8(*int8 s1,*int8 s2)" `748 
V L "s" 4 293 "*int8" `751 
V L "t" 4 293 "*int8" `752 
C L "strlen" 4 19 2 "FUNCTION"
F N "strlen" 4 318 ""
V L "s" 4 318 "*int8" `754 
F G "strlen" 4 319 "int16(*int8 s,*int8 s1,*int8 s2)" `753 
V L "sc" 4 320 "*int8" `755 
F N "strtok" 4 341 ""
V L "s1" 4 341 "*int8" `757 
V L "s2" 4 341 "*int8" `758 
F G "strtok" 4 342 "*int8(*int8 s1,*int8 s2)" `756 
V L "beg" 4 343 "*int8" `759 
V L "end" 4 343 "*int8" `760 
V L "save" 4 344 "*int8" `761 
C L "stricmp" 4 19 6 "FUNCTION"
F N "stricmp" 4 392 ""
V L "s1" 4 392 "*int8" `763 
V L "s2" 4 392 "*int8" `764 
F G "stricmp" 4 393 "sint8(*int8 s1,*int8 s2)" `762 
F N "strlwr" 4 406 ""
V L "s" 4 406 "*int8" `768 
F G "strlwr" 4 407 "*int8(*int8 s,*int8 s)" `767 
V L "p" 4 408 "*int8" `769 
F N "strupr" 4 420 ""
V L "s" 4 420 "*int8" `771 
F G "strupr" 4 421 "*int8(*int8 s)" `770 
V L "p" 4 422 "*int8" `772 
F N "div" 2 275 ""
V L "numer" 2 275 "sint8" `673 
V L "denom" 2 275 "sint8" `775 
F G "div" 2 276 "div_t(sint8 numer,sint8 denom)" `672 
V L "val" 2 277 "div_t" `773 
F N "ldiv" 2 283 ""
V L "numer" 2 283 "sint16" `676 
V L "denom" 2 283 "sint16" `782 
F G "ldiv" 2 284 "ldiv_t(sint16 numer,sint16 denom)" `675 
V L "val" 2 285 "ldiv_t" `780 
F N "atoe" 2 362 ""
V L "s" 2 362 "*int8" `788 
F G "atoe" 2 363 "float(*int8 s)" `665 
V L "pow10" 2 364 "float" `787 
V L "result" 2 365 "float" `788 
V L "sign" 2 366 "int8" `789 
V L "expsign" 2 367 "int8" `790 
V L "c" 2 368 "int8" `791 
V L "ptr" 2 369 "int8" `792 
V L "i" 2 370 "int8" `793 
V L "exp" 2 371 "float" `794 
V L "expcnt" 2 372 "int8" `795 
C L "atoe" 2 398 1 "FUNCTION"
F N "atoi" 2 430 ""
V L "s" 2 430 "*int8" `808 
F G "atoi" 2 431 "sint8(*int8 s)" `643 
V L "result" 2 432 "sint8" `807 
V L "sign" 2 433 "int8" `808 
V L "base" 2 433 "int8" `809 
V L "index" 2 433 "int8" `810 
V L "c" 2 434 "int8" `811 
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
F N "atol" 2 499 ""
V L "s" 2 499 "*int8" `813 
F G "atol" 2 500 "sint16(*int8 s)" `651 
V L "result" 2 501 "sint16" `812 
V L "sign" 2 502 "int8" `813 
V L "base" 2 502 "int8" `814 
V L "index" 2 502 "int8" `815 
V L "c" 2 503 "int8" `816 
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "mult_with10" 2 398 1 "FUNCTION"
F N "mult_with10" 2 566 ""
V L "num" 2 566 "int32" `818 
F G "mult_with10" 2 567 "sint32(int32 num)" `817 
F N "atoi32" 2 572 ""
V L "s" 2 572 "*int8" `820 
F G "atoi32" 2 573 "sint32(*int8 s)" `645 
V L "result" 2 574 "sint32" `819 
V L "sign" 2 575 "int8" `820 
V L "base" 2 575 "int8" `821 
V L "index" 2 575 "int8" `822 
V L "c" 2 576 "int8" `823 
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
F N "itoa" 2 771 ""
V L "num" 2 771 "sint32" `648 
V L "base" 2 771 "int8" `649 
V L "s" 2 771 "*int8" `827 
F G "itoa" 2 772 "*int8(sint32 num,int8 base,*int8 s)" `647 
V L "temp" 2 773 "int32" `824 
V L "i" 2 774 "int8" `825 
V L "sign" 2 774 "int8" `826 
V L "cnt" 2 774 "int8" `827 
V L "c" 2 775 "int8" `828 
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
F N "strtof" 2 886 ""
V L "s" 2 886 "*int8" `662 
V L "endptr" 2 886 "??0 *" `837 
F G "strtof" 2 887 "float(*int8 s,??0 * endptr)" `661 
V L "pow10" 2 888 "float" `835 
V L "result" 2 889 "float" `836 
V L "skip" 2 890 "int1" `837 
V L "sign" 2 890 "int1" `838 
V L "point" 2 890 "int1" `839 
V L "c" 2 891 "int8" `840 
V L "ptr" 2 892 "int8" `841 
F N "strtoul" 2 1104 ""
V L "s" 2 1104 "*int8" `658 
V L "endptr" 2 1104 "*int8" `659 
V L "base" 2 1104 "sint8" `846 
F G "strtoul" 2 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `657 
V L "sc" 2 1106 "*int8" `843 
V L "s1" 2 1106 "*int8" `844 
V L "sd" 2 1106 "*int8" `845 
V L "x" 2 1107 "int16" `846 
V L "sign" 2 1108 "int8" `847 
V L "digits" 2 1109 "int8[1]" `848 
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
F N "strtol" 2 1166 ""
V L "s" 2 1166 "*int8" `654 
V L "endptr" 2 1166 "*int8" `655 
V L "base" 2 1166 "sint8" `853 
F G "strtol" 2 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `653 
V L "sc" 2 1168 "*int8" `850 
V L "s1" 2 1168 "*int8" `851 
V L "sd" 2 1168 "*int8" `852 
V L "x" 2 1169 "sint16" `853 
V L "sign" 2 1170 "int8" `854 
V L "digits" 2 1171 "int8[1]" `855 
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
F N "system" 2 1229 ""
V L "string" 2 1229 "*int8" `858 
F G "system" 2 1230 "sint8(*int8 string)" `670 
F N "mblen" 2 1234 ""
V L "s" 2 1234 "*int8" `858 
V L "n" 2 1234 "int16" `859 
F G "mblen" 2 1235 "int16(*int8 s,int16 n,*int8 s,int16 n)" `857 
F N "mbtowc" 2 1239 ""
V L "pwc" 2 1239 "*int8" `861 
V L "s" 2 1239 "*int8" `862 
V L "n" 2 1239 "int16" `863 
F G "mbtowc" 2 1240 "int8(*int8 pwc,*int8 s,int16 n,int8 wchar)" `860 
F N "wctomb" 2 1245 ""
V L "s" 2 1245 "*int8" `865 
V L "wchar" 2 1245 "int8" `866 
F G "wctomb" 2 1246 "int8(*int8 s,int8 wchar,*int8 s,int16 n)" `864 
F N "mbstowcs" 2 1251 ""
V L "pwcs" 2 1251 "*int8" `868 
V L "s" 2 1251 "*int8" `869 
V L "n" 2 1251 "int16" `870 
F G "mbstowcs" 2 1252 "int16(*int8 pwcs,*int8 s,int16 n,*int8 pwcs,int16 n)" `867 
F N "wcstombs" 2 1257 ""
V L "s" 2 1257 "*int8" `872 
V L "pwcs" 2 1257 "*int8" `873 
V L "n" 2 1257 "int16" `874 
F G "wcstombs" 2 1258 "int16(*int8 s,*int8 pwcs,int16 n,int16 ,int16 )" `871 
V G "_Randseed" 2 1267 "int32" `875 
F N "rand" 2 1269 ""
F G "rand" 2 1270 "int16()" `667 
F N "srand" 2 1275 ""
V L "seed" 2 1275 "int32" `880 
F G "srand" 2 1276 "void(int32 seed)" `668 
F N "*_Cmpfun" 2 1285 ""
V L "p1" 2 1285 "*int8" `880 
V L "p2" 2 1285 "*int8" `881 
T G "*_Cmpfun" 2 1285 "sint8(*int8 p1,*int8 p2,*int8 qdata,int8 qitems,int8 qsize,p1 cmp)" `879 
F N "qsort" 2 1292 ""
V L "qdata" 2 1292 "*int8" `884 
V L "qitems" 2 1292 "int8" `885 
V L "qsize" 2 1292 "int8" `886 
V L "cmp" 2 1292 "_Cmpfun" `887 
F G "qsort" 2 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `883 
V L "m" 2 1293 "int8" `888 
V L "j" 2 1293 "int8" `889 
V L "i" 2 1293 "int8" `890 
V L "l" 2 1293 "int8" `891 
V L "done" 2 1294 "int1" `892 
V L "t" 2 1295 "int8[16]" `893 
F N "bsearch" 2 1320 ""
V L "key" 2 1320 "*int8" `896 
V L "base" 2 1320 "*int8" `897 
V L "num" 2 1320 "int16" `898 
V L "width" 2 1320 "int16" `899 
V L "cmp" 2 1320 "_Cmpfun" `900 
F G "bsearch" 2 1321 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `895 
V L "p" 2 1322 "*int8" `901 
V L "q" 2 1322 "*int8" `902 
V L "n" 2 1323 "int16" `903 
V L "pivot" 2 1324 "int16" `904 
V L "val" 2 1325 "sint8" `905 
C L "bsearch" 2 398 1 "FUNCTION"
V G "command" 0 22 "int8" `909 
V G "address1" 0 23 "int8" `910 
V G "height" 0 24 "int16" `911 
V G "dtoabit" 0 24 "int16" `912 
V G "pheight" 0 24 "int16" `913 
V G "timeout" 0 24 "int16" `914 
V G "num" 0 24 "int16" `915 
V G "timeout_error" 0 25 "int1" `916 
V G "i" 0 26 "int16" `917 
V G "x" 0 27 "int8" `918 
V G "y" 0 27 "int8" `919 
V G "cmd" 0 27 "int8" `920 
V G "addrs1" 0 27 "int8" `921 
V G "heighth" 0 27 "int8" `922 
V G "heightl" 0 27 "int8" `923 
V G "lnum" 0 27 "int8" `924 
V G "usdelh" 0 27 "int8" `925 
V G "usdell" 0 27 "int8" `926 
V G "numhi" 0 27 "int8" `927 
V G "numlo" 0 27 "int8" `928 
V G "trigdelay1" 0 28 "int8" `929 
V G "trigdelay2" 0 28 "int8" `930 
V G "module" 0 29 "int8" `931 
F N "triggerdelay5" 0 32 ""
f G "triggerdelay5" 0 32 "void()" `932 
F N "triggerdelay025" 0 33 ""
f G "triggerdelay025" 0 33 "void()" `933 
F N "run" 0 34 ""
f G "run" 0 34 "void()" `934 
F N "continuous" 0 35 ""
f G "continuous" 0 35 "void()" `935 
F N "numberhi" 0 36 ""
f G "numberhi" 0 36 "void()" `936 
F N "numberlo" 0 37 ""
f G "numberlo" 0 37 "void()" `937 
F N "singleselect" 0 38 ""
f G "singleselect" 0 38 "void()" `938 
F N "stop" 0 39 ""
f G "stop" 0 39 "void()" `939 
F N "loadheight" 0 40 ""
f G "loadheight" 0 40 "void()" `940 
F N "heighthi" 0 41 ""
f G "heighthi" 0 41 "void()" `941 
F N "heightlo" 0 42 ""
f G "heightlo" 0 42 "void()" `942 
F N "usdelay" 0 43 ""
f G "usdelay" 0 43 "void()" `943 
F N "flash1" 0 44 ""
f G "flash1" 0 44 "void()" `944 
F N "flash2" 0 45 ""
f G "flash2" 0 45 "void()" `945 
F N "flash3" 0 46 ""
f G "flash3" 0 46 "void()" `946 
F N "reset" 0 47 ""
f G "reset" 0 47 "void()" `947 
F N "endrun" 0 48 ""
f G "endrun" 0 48 "void()" `948 
F N "rtncode" 0 49 ""
f G "rtncode" 0 49 "void()" `949 
F N "MAIN" 0 51 ""
F G "MAIN" 0 52 "void()" `950 
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
C L "flash1" 0 15 1 "FUNCTION"
F N "flash1" 0 96 ""
F G "flash1" 0 97 "void()" `944 
C L "flash1" 0 15 1 "FUNCTION"
C L "flash1" 0 15 1 "FUNCTION"
C L "flash1" 0 15 1 "FUNCTION"
C L "flash2" 0 15 1 "FUNCTION"
F N "flash2" 0 113 ""
F G "flash2" 0 114 "void()" `945 
C L "flash3" 0 15 1 "FUNCTION"
F N "flash3" 0 133 ""
F G "flash3" 0 134 "void()" `946 
C L "singleselect" 0 15 1 "FUNCTION"
F N "singleselect" 0 157 ""
F G "singleselect" 0 158 "void()" `938 
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 1 "FUNCTION"
C L "singleselect" 0 15 33 "FUNCTION"
C L "continuous" 0 15 1 "FUNCTION"
F N "continuous" 0 304 ""
F G "continuous" 0 305 "void()" `935 
C L "continuous" 0 15 1 "FUNCTION"
C L "continuous" 0 15 1 "FUNCTION"
C L "run" 0 15 1 "FUNCTION"
F N "run" 0 318 ""
F G "run" 0 319 "void()" `934 
C L "run" 0 15 1 "FUNCTION"
C L "run" 0 15 1 "FUNCTION"
C L "run" 0 15 1 "FUNCTION"
C L "run" 0 15 1 "FUNCTION"
C L "heighthi" 0 15 1 "FUNCTION"
F N "heighthi" 0 353 ""
F G "heighthi" 0 354 "void()" `941 
C L "heighthi" 0 15 1 "FUNCTION"
C L "heightlo" 0 15 1 "FUNCTION"
F N "heightlo" 0 370 ""
F G "heightlo" 0 371 "void()" `942 
C L "heightlo" 0 15 1 "FUNCTION"
C L "stop" 0 15 1 "FUNCTION"
F N "stop" 0 386 ""
F G "stop" 0 387 "void()" `939 
C L "stop" 0 15 1 "FUNCTION"
C L "triggerdelay5" 0 15 1 "FUNCTION"
F N "triggerdelay5" 0 395 ""
F G "triggerdelay5" 0 396 "void()" `932 
C L "triggerdelay5" 0 15 1 "FUNCTION"
C L "triggerdelay025" 0 15 1 "FUNCTION"
F N "triggerdelay025" 0 410 ""
F G "triggerdelay025" 0 411 "void()" `933 
C L "triggerdelay025" 0 15 1 "FUNCTION"
C L "numberhi" 0 15 1 "FUNCTION"
F N "numberhi" 0 425 ""
F G "numberhi" 0 426 "void()" `936 
C L "numberhi" 0 15 1 "FUNCTION"
C L "numberlo" 0 15 1 "FUNCTION"
F N "numberlo" 0 440 ""
F G "numberlo" 0 441 "void()" `937 
C L "numberlo" 0 15 1 "FUNCTION"
C L "loadheight" 0 15 1 "FUNCTION"
F N "loadheight" 0 455 ""
F G "loadheight" 0 456 "void()" `940 
C L "loadheight" 0 462 1 "*"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 462 1 "FUNCTION"
C L "loadheight" 0 498 1 "*"
C L "loadheight" 0 498 1 "FUNCTION"
C L "loadheight" 0 498 1 "FUNCTION"
C L "usdelay" 0 498 1 "FUNCTION"
F N "usdelay" 0 512 ""
F G "usdelay" 0 513 "void()" `943 
C L "usdelay" 0 498 1 "FUNCTION"
C L "reset" 0 498 1 "FUNCTION"
F N "reset" 0 532 ""
F G "reset" 0 533 "void()" `947 
C L "reset" 0 498 1 "FUNCTION"
C L "reset" 0 498 1 "FUNCTION"
C L "reset" 0 498 1 "FUNCTION"
C L "endrun" 0 498 1 "FUNCTION"
F N "endrun" 0 542 ""
F G "endrun" 0 543 "void()" `948 
C L "endrun" 0 498 1 "FUNCTION"
C L "endrun" 0 498 1 "FUNCTION"
C L "endrun" 0 498 1 "FUNCTION"
C L "rtncode" 0 498 1 "FUNCTION"
F N "rtncode" 0 551 ""
F G "rtncode" 0 552 "void()" `949 
C L "rtncode" 0 498 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
