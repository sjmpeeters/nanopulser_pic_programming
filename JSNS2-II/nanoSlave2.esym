C L "continuous" 0 9 1 "FUNCTION"
C G "" 0 307 1 "*"
C G "" 0 311 5 "*"
C G "" 0 316 6 "*"
D G "__PCM__" 0 324 ""5.072""
D G "__DEVICE__" 0 324 "88"
D G "__DATE__" 0 324 ""12-Oct-22""
D G "__TIME__" 0 324 ""12:42:07""
D G "_UNICODE" 0 324 ""?""
D G "__EVAL" 0 324 ""?"" "Standard Header file for the PIC16F88 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 38 ""
v L "value" 1 38 "int8" `55 
f B "set_tris_a" 1 38 "void(int8 value)" `54 
f N "set_tris_b" 1 39 ""
v L "value" 1 39 "int8" `57 
f B "set_tris_b" 1 39 "void(int8 value)" `56 
f N "get_tris_a" 1 40 ""
f B "get_tris_a" 1 40 "int8()" `58 
f N "get_tris_b" 1 41 ""
f B "get_tris_b" 1 41 "int8()" `59 
f N "output_a" 1 42 ""
v L "value" 1 42 "int8" `61 
f B "output_a" 1 42 "void(int8 value)" `60 
f N "output_b" 1 43 ""
v L "value" 1 43 "int8" `63 
f B "output_b" 1 43 "void(int8 value)" `62 
f N "input_a" 1 44 ""
f B "input_a" 1 44 "int8()" `64 
f N "input_b" 1 45 ""
f B "input_b" 1 45 "int8()" `65 
f N "input_change_a" 1 46 ""
f B "input_change_a" 1 46 "int8()" `66 
f N "input_change_b" 1 47 ""
f B "input_change_b" 1 47 "int8()" `67 
f N "port_b_pullups" 1 48 ""
v L "value" 1 48 "int8" `69 
f B "port_b_pullups" 1 48 "void(int8 value)" `68 
f N "input" 1 49 ""
v L "pin" 1 49 "int16" `71 
f B "input" 1 49 "int8(int16 pin)" `70 
f N "input_state" 1 50 ""
v L "pin" 1 50 "int16" `73 
f B "input_state" 1 50 "int8(int16 pin)" `72 
f N "output_low" 1 51 ""
v L "pin" 1 51 "int16" `75 
f B "output_low" 1 51 "void(int16 pin)" `74 
f N "output_high" 1 52 ""
v L "pin" 1 52 "int16" `77 
f B "output_high" 1 52 "void(int16 pin)" `76 
f N "output_toggle" 1 53 ""
v L "pin" 1 53 "int16" `79 
f B "output_toggle" 1 53 "void(int16 pin)" `78 
f N "output_bit" 1 54 ""
v L "pin" 1 54 "int16" `81 
v L "level" 1 54 "int8" `82 
f B "output_bit" 1 54 "void(int16 pin,int8 level)" `80 
f N "output_float" 1 55 ""
v L "pin" 1 55 "int16" `84 
f B "output_float" 1 55 "void(int16 pin)" `83 
f N "output_drive" 1 56 ""
v L "pin" 1 56 "int16" `86 
f B "output_drive" 1 56 "void(int16 pin)" `85  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 60 "40"
d G "PIN_A1" 1 61 "41"
d G "PIN_A2" 1 62 "42"
d G "PIN_A3" 1 63 "43"
d G "PIN_A4" 1 64 "44"
d G "PIN_A5" 1 65 "45"
d G "PIN_A6" 1 66 "46"
d G "PIN_A7" 1 67 "47"
d G "PIN_B0" 1 69 "48"
d G "PIN_B1" 1 70 "49"
d G "PIN_B2" 1 71 "50"
d G "PIN_B3" 1 72 "51"
d G "PIN_B4" 1 73 "52"
d G "PIN_B5" 1 74 "53"
d G "PIN_B6" 1 75 "54"
d G "PIN_B7" 1 76 "55"
d G "FALSE" 1 79 "0"
d G "TRUE" 1 80 "1"
d G "BYTE" 1 82 "int8"
d G "BOOLEAN" 1 83 "int1"
d G "getc" 1 85 "getch"
d G "fgetc" 1 86 "getch"
d G "getchar" 1 87 "getch"
d G "putc" 1 88 "putchar"
d G "fputc" 1 89 "putchar"
d G "fgets" 1 90 "gets"
d G "fputs" 1 91 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 96 ""
f B "restart_cause" 1 96 "int8()" `87 
f N "reset_cpu" 1 97 ""
f B "reset_cpu" 1 97 "void()" `88 
f N "sleep" 1 98 ""
f B "sleep" 1 98 "void()" `89  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 100 "3"
d G "WDT_TIMEOUT" 1 101 "11"
d G "MCLR_FROM_SLEEP" 1 102 "19"
d G "MCLR_FROM_RUN" 1 103 "27"
d G "NORMAL_POWER_UP" 1 104 "25"
d G "BROWNOUT_RESTART" 1 105 "26"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 112 ""
v L "mode" 1 112 "int8" `91 
f B "setup_timer_0" 1 112 "void(int8 mode)" `90 
f N "set_timer0" 1 113 ""
v L "value" 1 113 "int8" `93 
f B "set_timer0" 1 113 "void(int8 value)" `92 
f N "get_timer0" 1 114 ""
f B "get_timer0" 1 114 "int8()" `94 
f N "setup_counters" 1 115 ""
v L "mode" 1 115 "int8" `96 
v L "prescaler" 1 115 "int8" `97 
f B "setup_counters" 1 115 "void(int8 mode,int8 prescaler)" `95 
f N "set_rtcc" 1 116 ""
v L "value" 1 116 "int8" `99 
f B "set_rtcc" 1 116 "void(int8 value)" `98 
f N "get_rtcc" 1 117 ""
f B "get_rtcc" 1 117 "int8()" `100  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 119 "0"
d G "T0_EXT_L_TO_H" 1 120 "32"
d G "T0_EXT_H_TO_L" 1 121 "48"
d G "T0_DIV_1" 1 123 "8"
d G "T0_DIV_2" 1 124 "0"
d G "T0_DIV_4" 1 125 "1"
d G "T0_DIV_8" 1 126 "2"
d G "T0_DIV_16" 1 127 "3"
d G "T0_DIV_32" 1 128 "4"
d G "T0_DIV_64" 1 129 "5"
d G "T0_DIV_128" 1 130 "6"
d G "T0_DIV_256" 1 131 "7"
d G "T0_8_BIT" 1 134 "0"
d G "RTCC_INTERNAL" 1 138 "0"
d G "RTCC_EXT_L_TO_H" 1 139 "32"
d G "RTCC_EXT_H_TO_L" 1 140 "48"
d G "RTCC_DIV_1" 1 141 "8"
d G "RTCC_DIV_2" 1 142 "0"
d G "RTCC_DIV_4" 1 143 "1"
d G "RTCC_DIV_8" 1 144 "2"
d G "RTCC_DIV_16" 1 145 "3"
d G "RTCC_DIV_32" 1 146 "4"
d G "RTCC_DIV_64" 1 147 "5"
d G "RTCC_DIV_128" 1 148 "6"
d G "RTCC_DIV_256" 1 149 "7"
d G "RTCC_8_BIT" 1 150 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 161 ""
v L "mode" 1 161 "int16" `102 
f B "setup_wdt" 1 161 "void(int16 mode)" `101 
f N "restart_wdt" 1 162 ""
f B "restart_wdt" 1 162 "void()" `103  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 165 "8"
d G "WDT_36MS" 1 166 "9"
d G "WDT_72MS" 1 167 "10"
d G "WDT_144MS" 1 168 "11"
d G "WDT_288MS" 1 169 "12"
d G "WDT_576MS" 1 170 "13"
d G "WDT_1152MS" 1 171 "14"
d G "WDT_2304MS" 1 172 "15"
d G "WDT_ON" 1 177 "0x4000"
d G "WDT_OFF" 1 178 "0"
d G "WDT_DIV_16" 1 179 "0x100"
d G "WDT_DIV_8" 1 180 "0x300"
d G "WDT_DIV_4" 1 181 "0x500"
d G "WDT_DIV_2" 1 182 "0x700"
d G "WDT_TIMES_1" 1 183 "0x900" "Default"
d G "WDT_TIMES_2" 1 184 "0xB00"
d G "WDT_TIMES_4" 1 185 "0xD00"
d G "WDT_TIMES_8" 1 186 "0xF00"
d G "WDT_TIMES_16" 1 187 "0x1100"
d G "WDT_TIMES_32" 1 188 "0x1300"
d G "WDT_TIMES_64" 1 189 "0x1500"
d G "WDT_TIMES_128" 1 190 "0x1700"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 195 ""
v L "mode" 1 195 "int16" `105 
f B "setup_timer_1" 1 195 "void(int16 mode)" `104 
f N "get_timer1" 1 196 ""
f B "get_timer1" 1 196 "int16()" `106 
f N "set_timer1" 1 197 ""
v L "value" 1 197 "int16" `108 
f B "set_timer1" 1 197 "void(int16 value)" `107  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 200 "0"
d G "T1_INTERNAL" 1 201 "0x85"
d G "T1_EXTERNAL" 1 202 "0x87"
d G "T1_EXTERNAL_SYNC" 1 203 "0x83"
d G "T1_CLK_OUT" 1 205 "8"
d G "T1_DIV_BY_1" 1 207 "0"
d G "T1_DIV_BY_2" 1 208 "0x10"
d G "T1_DIV_BY_4" 1 209 "0x20"
d G "T1_DIV_BY_8" 1 210 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 215 ""
v L "mode" 1 215 "int8" `110 
v L "period" 1 215 "int8" `111 
v L "postscale" 1 215 "int8" `112 
f B "setup_timer_2" 1 215 "void(int8 mode,int8 period,int8 postscale)" `109 
f N "get_timer2" 1 216 ""
f B "get_timer2" 1 216 "int8()" `113 
f N "set_timer2" 1 217 ""
v L "value" 1 217 "int8" `115 
f B "set_timer2" 1 217 "void(int8 value)" `114  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 219 "0"
d G "T2_DIV_BY_1" 1 220 "4"
d G "T2_DIV_BY_4" 1 221 "5"
d G "T2_DIV_BY_16" 1 222 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 228 ""
v L "mode" 1 228 "int32" `117 
f B "setup_ccp1" 1 228 "void(int32 mode)" `116 
f N "setup_ccp1" 1 229 ""
v L "mode" 1 229 "int32" `119 
v L "pwm" 1 229 "int8" `120 
f B "setup_ccp1" 1 229 "void(int32 mode,int8 pwm)" `118 
f N "set_pwm1_duty" 1 230 ""
v L "value" 1 230 "int16" `122 
f B "set_pwm1_duty" 1 230 "void(int16 value)" `121  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 232 "0"
d G "CCP_CAPTURE_FE" 1 233 "0x04"
d G "CCP_CAPTURE_RE" 1 234 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 235 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 236 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 237 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 238 "0x09"
d G "CCP_COMPARE_INT" 1 239 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 240 "0x0B"
d G "CCP_PWM" 1 241 "0x0C"
d G "CCP_PWM_PLUS_1" 1 242 "0x1c"
d G "CCP_PWM_PLUS_2" 1 243 "0x2c"
d G "CCP_PWM_PLUS_3" 1 244 "0x3c"
c L "set_pwm1_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 252 ""
v L "mode" 1 252 "int32" `127 
f B "setup_spi" 1 252 "void(int32 mode)" `126 
f N "spi_write" 1 253 ""
v L "value" 1 253 "int8" `129 
f B "spi_write" 1 253 "void(int8 value)" `128 
f N "spi_read" 1 254 ""
f B "spi_read" 1 254 "int8()" `130 
f N "spi_read" 1 255 ""
v L "value" 1 255 "int8" `132 
f B "spi_read" 1 255 "int8(int8 value)" `131 
f N "spi_data_is_in" 1 256 ""
f B "spi_data_is_in" 1 256 "int8()" `133  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 258 "0x00"
d G "SPI_MASTER" 1 259 "0x20"
d G "SPI_SLAVE" 1 260 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 261 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 262 "0x00"
d G "SPI_CLK_DIV_4" 1 263 "0x00"
d G "SPI_CLK_DIV_16" 1 264 "0x01"
d G "SPI_CLK_DIV_64" 1 265 "0x02"
d G "SPI_CLK_T2" 1 266 "0x03"
d G "SPI_SS_DISABLED" 1 267 "0x01"
d G "SPI_XMIT_L_TO_H" 1 269 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 270 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 272 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 273 "0x8000"
d G "SPI_L_TO_H" 1 276 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 277 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 1 3 2 "FUNCTION"
f N "setup_uart" 1 281 ""
v L "baud" 1 281 "int32" `135 
f B "setup_uart" 1 281 "void(int32 baud)" `134 
f N "setup_uart" 1 282 ""
v L "baud" 1 282 "int32" `137 
v L "stream" 1 282 "int8" `138 
f B "setup_uart" 1 282 "void(int32 baud,int8 stream)" `136 
f N "setup_uart" 1 283 ""
v L "baud" 1 283 "int32" `140 
v L "stream" 1 283 "int8" `141 
v L "clock" 1 283 "int32" `142 
f B "setup_uart" 1 283 "void(int32 baud,int8 stream,int32 clock)" `139 
f N "set_uart_speed" 1 284 ""
v L "baud" 1 284 "int32" `144 
f B "set_uart_speed" 1 284 "void(int32 baud)" `143 
f N "set_uart_speed" 1 285 ""
v L "baud" 1 285 "int32" `146 
v L "stream" 1 285 "int8" `147 
f B "set_uart_speed" 1 285 "void(int32 baud,int8 stream)" `145 
f N "set_uart_speed" 1 286 ""
v L "baud" 1 286 "int32" `149 
v L "stream" 1 286 "int8" `150 
v L "clock" 1 286 "int32" `151 
f B "set_uart_speed" 1 286 "void(int32 baud,int8 stream,int32 clock)" `148  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 290 "2"
d G "UART_DATA" 1 291 "4"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 295 ""
v L "mode" 1 295 "int32" `153 
f B "setup_comparator" 1 295 "void(int32 mode)" `152  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 297 "0x0ff07"
d G "A0_A3_A1_A2" 1 298 "0xfff04"
d G "A0_A2_A1_A2" 1 299 "0x7ff03"
d G "A0_VR_A1_VR" 1 300 "0x3ff02"
d G "A3_VR_A2_VR" 1 301 "0xcff0a"
d G "A3_A2_A1_A2" 1 302 "0xeff0b"
d G "NC_NC_A1_A2" 1 303 "0x6ff05"
d G "A0_A2_A1_A2_OUT_ON_A3_A4" 1 304 "0x7e706"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 311 ""
v L "mode" 1 311 "int8" `157 
f B "setup_vref" 1 311 "void(int8 mode)" `156  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 313 "0xa0"
d G "VREF_HIGH" 1 314 "0x80"
d G "VREF_A2" 1 316 "0x40"
c L "setup_vref" 1 3 2 "FUNCTION"
f N "setup_oscillator" 1 322 ""
v L "mode" 1 322 "int8" `159 
f B "setup_oscillator" 1 322 "int8(int8 mode)" `158 
f N "setup_oscillator" 1 323 ""
v L "mode" 1 323 "int8" `161 
v L "tune" 1 323 "sint8" `162 
f B "setup_oscillator" 1 323 "int8(int8 mode,sint8 tune)" `160  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 325 "0"
d G "OSC_125KHZ" 1 326 "0x10"
d G "OSC_250KHZ" 1 327 "0x20"
d G "OSC_500KHZ" 1 328 "0x30"
d G "OSC_1MHZ" 1 329 "0x40"
d G "OSC_2MHZ" 1 330 "0x50"
d G "OSC_4MHZ" 1 331 "0x60"
d G "OSC_8MHZ" 1 332 "0x70"
d G "OSC_TIMER1" 1 334 "1"
d G "OSC_INTRC" 1 335 "2"
d G "OSC_NORMAL" 1 336 "0"
d G "OSC_STATE_STABLE" 1 340 "4"
d G "OSC_STATE_EXT_RUNNING" 1 341 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 349 ""
v L "mode" 1 349 "int32" `164 
f B "setup_adc" 1 349 "void(int32 mode)" `163 
f N "read_adc" 1 350 ""
f B "read_adc" 1 350 "int8()" `165 
f N "read_adc" 1 351 ""
v L "mode" 1 351 "int8" `167 
f B "read_adc" 1 351 "int8(int8 mode)" `166 
f N "read_adc" 1 352 ""
f G "read_adc" 1 352 "int16()" `168 
f N "read_adc" 1 353 ""
v L "mode" 1 353 "int8" `169 
f G "read_adc" 1 353 "int16(int8 mode,int16 pins)" `168 
f N "adc_done" 1 354 ""
f B "adc_done" 1 354 "int8(int8 mode,int16 pins)" `168  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 356 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 357 "0x10000"
d G "ADC_CLOCK_DIV_4" 1 358 "0x4000"
d G "ADC_CLOCK_DIV_8" 1 359 "0x0040"
d G "ADC_CLOCK_DIV_16" 1 360 "0x4040"
d G "ADC_CLOCK_DIV_32" 1 361 "0x0080"
d G "ADC_CLOCK_DIV_64" 1 362 "0x4080"
d G "ADC_CLOCK_INTERNAL" 1 363 "0x00c0" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 366 ""
v L "pins" 1 366 "int16" `170 
f B "setup_adc_ports" 1 366 "void(int16 pins)" `169 
f N "setup_adc_ports" 1 367 ""
v L "pins" 1 367 "int16" `172 
v L "reference" 1 367 "int16" `173 
f B "setup_adc_ports" 1 367 "void(int16 pins,int16 reference)" `171 
f N "set_analog_pins" 1 368 ""
v L "pins" 1 368 "int16" `175 
f B "set_analog_pins" 1 368 "void(int16 pins)" `174 
f N "set_analog_pins" 1 369 ""
v L "pins" 1 369 "int16" `177 
v L "reference" 1 369 "int16" `178 
f B "set_analog_pins" 1 369 "void(int16 pins,int16 reference)" `176 
f N "set_adc_channel" 1 370 ""
v L "channel" 1 370 "int8" `180 
f B "set_adc_channel" 1 370 "void(int8 channel)" `179  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 1 374 "1" "| A0"
d G "sAN1" 1 375 "2" "| A1"
d G "sAN2" 1 376 "4" "| A2"
d G "sAN3" 1 377 "8" "| A3"
d G "sAN4" 1 378 "16" "| A4"
d G "sAN5" 1 379 "32" "| B6"
d G "sAN6" 1 380 "64" "| B7"
d G "NO_ANALOGS" 1 381 "0" "None"
d G "ALL_ANALOG" 1 382 "127" "A0 A1 A2 A3 A4 B6 B7"
d G "VSS_VDD" 1 385 "0x0000" "| Range 0-Vdd"
d G "VREF_VDD" 1 386 "0x1000" "| Range VrefL-Vdd"
d G "VSS_VREF" 1 387 "0x2000" "| Range 0-VrefH"
d G "VREF_VREF" 1 388 "0x3000" "| Range VrefL-VrefH"
d G "ADC_START_AND_READ" 1 391 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 392 "1"
d G "ADC_READ_ONLY" 1 393 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 399 ""
v L "x" 1 399 "sint8" `182 
f B "abs" 1 399 "sint8(sint8 x)" `181 
f N "abs" 1 400 ""
v L "x" 1 400 "sint16" `184 
f B "abs" 1 400 "sint16(sint16 x)" `183 
f N "abs" 1 401 ""
v L "x" 1 401 "sint32" `186 
f B "abs" 1 401 "sint32(sint32 x)" `185 
f N "abs" 1 402 ""
v L "x" 1 402 "float" `188 
f B "abs" 1 402 "float(float x)" `187 
f N "_mul" 1 403 ""
v L "??65535" 1 403 "int8" `190 
v L "??65535" 1 403 "int8" `191 
f B "_mul" 1 403 "int16(int8 ,int8 )" `189 
f N "_mul" 1 404 ""
v L "??65535" 1 404 "sint8" `193 
v L "??65535" 1 404 "sint8" `194 
f B "_mul" 1 404 "sint16(sint8 ,sint8 )" `192 
f N "_mul" 1 405 ""
v L "??65535" 1 405 "int16" `196 
v L "??65535" 1 405 "int16" `197 
f B "_mul" 1 405 "int32(int16 ,int16 )" `195 
f N "_mul" 1 406 ""
v L "??65535" 1 406 "sint16" `199 
v L "??65535" 1 406 "sint16" `200 
f B "_mul" 1 406 "sint32(sint16 ,sint16 )" `198  "Memory Manipulation Prototypes:"
f N "read_bank" 1 409 ""
v L "bank" 1 409 "int8" `202 
v L "offset" 1 409 "int8" `203 
f B "read_bank" 1 409 "int8(int8 bank,int8 offset)" `201 
f N "write_bank" 1 410 ""
v L "bank" 1 410 "int8" `205 
v L "offset" 1 410 "int8" `206 
v L "value" 1 410 "int8" `207 
f B "write_bank" 1 410 "void(int8 bank,int8 offset,int8 value)" `204 
f N "strcpy" 1 411 ""
v L "dest" 1 411 "*int8" `209 
v L "src" 1 411 "*int8" `210 
f B "strcpy" 1 411 "void(*int8 dest,*int8 src)" `208 
f N "memset" 1 412 ""
v L "destination" 1 412 "*int8" `212 
v L "value" 1 412 "int8" `213 
v L "num" 1 412 "int16" `214 
f B "memset" 1 412 "void(*int8 destination,int8 value,int16 num)" `211 
f N "memcpy" 1 413 ""
v L "destination" 1 413 "*int8" `216 
v L "source" 1 413 "*int8" `217 
v L "num" 1 413 "int16" `218 
f B "memcpy" 1 413 "void(*int8 destination,*int8 source,int16 num)" `215  "String Prototypes:"
f N "toupper" 1 416 ""
v L "cvalue" 1 416 "int8" `220 
f B "toupper" 1 416 "int8(int8 cvalue)" `219 
f N "tolower" 1 417 ""
v L "cvalue" 1 417 "int8" `222 
f B "tolower" 1 417 "int8(int8 cvalue)" `221 
f N "sprintf" 1 418 ""
v L "string" 1 418 "*int8" `224 
v L "cstring" 1 418 "*int8" `225 
f B "sprintf" 1 418 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `223  "Data Manipulators Prototypes:"
f N "shift_left" 1 421 ""
v L "address" 1 421 "*int8" `228 
v L "bytes" 1 421 "int8" `229 
v L "value" 1 421 "int8" `230 
f B "shift_left" 1 421 "int8(*int8 address,int8 bytes,int8 value)" `227 
f N "shift_right" 1 422 ""
v L "address" 1 422 "*int8" `232 
v L "bytes" 1 422 "int8" `233 
v L "value" 1 422 "int8" `234 
f B "shift_right" 1 422 "int8(*int8 address,int8 bytes,int8 value)" `231 
f N "rotate_left" 1 423 ""
v L "address" 1 423 "*int8" `236 
v L "bytes" 1 423 "int8" `237 
f B "rotate_left" 1 423 "void(*int8 address,int8 bytes)" `235 
f N "rotate_right" 1 424 ""
v L "address" 1 424 "*int8" `239 
v L "bytes" 1 424 "int8" `240 
f B "rotate_right" 1 424 "void(*int8 address,int8 bytes)" `238 
f N "swap" 1 425 ""
v L "value" 1 425 "int8" `242 
f B "swap" 1 425 "void(int8 value)" `241 
f N "make8" 1 426 ""
v L "var" 1 426 "int16" `244 
v L "offset" 1 426 "int8" `245 
f B "make8" 1 426 "int8(int16 var,int8 offset)" `243 
f N "make8" 1 427 ""
v L "var" 1 427 "int32" `247 
v L "offset" 1 427 "int8" `248 
f B "make8" 1 427 "int8(int32 var,int8 offset)" `246 
f N "make16" 1 428 ""
v L "varhigh" 1 428 "int8" `250 
v L "varlow" 1 428 "int8" `251 
f B "make16" 1 428 "int16(int8 varhigh,int8 varlow)" `249 
f N "make32" 1 429 ""
v L "var1" 1 429 "int16" `253 
f B "make32" 1 429 "int32(int16 var1)" `252 
f N "make32" 1 430 ""
v L "var1" 1 430 "int16" `255 
v L "var2" 1 430 "int16" `256 
f B "make32" 1 430 "int32(int16 var1,int16 var2)" `254 
f N "make32" 1 431 ""
v L "var1" 1 431 "int16" `258 
v L "var2" 1 431 "int8" `259 
f B "make32" 1 431 "int32(int16 var1,int8 var2)" `257 
f N "make32" 1 432 ""
v L "var1" 1 432 "int16" `261 
v L "var2" 1 432 "int8" `262 
v L "var3" 1 432 "int8" `263 
f B "make32" 1 432 "int32(int16 var1,int8 var2,int8 var3)" `260 
f N "make32" 1 433 ""
v L "var1" 1 433 "int8" `265 
f B "make32" 1 433 "int32(int8 var1)" `264 
f N "make32" 1 434 ""
v L "var1" 1 434 "int8" `267 
v L "var2" 1 434 "int8" `268 
f B "make32" 1 434 "int32(int8 var1,int8 var2)" `266 
f N "make32" 1 435 ""
v L "var1" 1 435 "int8" `270 
v L "var2" 1 435 "int8" `271 
v L "var3" 1 435 "int8" `272 
f B "make32" 1 435 "int32(int8 var1,int8 var2,int8 var3)" `269 
f N "make32" 1 436 ""
v L "var1" 1 436 "int8" `274 
v L "var2" 1 436 "int8" `275 
v L "var3" 1 436 "int8" `276 
v L "var4" 1 436 "int8" `277 
f B "make32" 1 436 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `273 
f N "make32" 1 437 ""
v L "var1" 1 437 "int8" `279 
v L "var2" 1 437 "int16" `280 
f B "make32" 1 437 "int32(int8 var1,int16 var2)" `278 
f N "make32" 1 438 ""
v L "var1" 1 438 "int8" `282 
v L "var2" 1 438 "int16" `283 
v L "var3" 1 438 "int8" `284 
f B "make32" 1 438 "int32(int8 var1,int16 var2,int8 var3)" `281 
f N "make32" 1 439 ""
v L "var1" 1 439 "int8" `286 
v L "var2" 1 439 "int8" `287 
v L "var3" 1 439 "int16" `288 
f B "make32" 1 439 "int32(int8 var1,int8 var2,int16 var3)" `285 
f N "bit_set" 1 440 ""
v L "var" 1 440 "int8" `290 
v L "bit" 1 440 "int8" `291 
f B "bit_set" 1 440 "void(int8 var,int8 bit)" `289 
f N "bit_set" 1 441 ""
v L "var" 1 441 "int16" `293 
v L "bit" 1 441 "int8" `294 
f B "bit_set" 1 441 "void(int16 var,int8 bit)" `292 
f N "bit_set" 1 442 ""
v L "var" 1 442 "int32" `296 
v L "bit" 1 442 "int8" `297 
f B "bit_set" 1 442 "void(int32 var,int8 bit)" `295 
f N "bit_clear" 1 443 ""
v L "var" 1 443 "int8" `299 
v L "bit" 1 443 "int8" `300 
f B "bit_clear" 1 443 "void(int8 var,int8 bit)" `298 
f N "bit_clear" 1 444 ""
v L "var" 1 444 "int16" `302 
v L "bit" 1 444 "int8" `303 
f B "bit_clear" 1 444 "void(int16 var,int8 bit)" `301 
f N "bit_clear" 1 445 ""
v L "var" 1 445 "int32" `305 
v L "bit" 1 445 "int8" `306 
f B "bit_clear" 1 445 "void(int32 var,int8 bit)" `304 
f N "bit_test" 1 446 ""
v L "var" 1 446 "int8" `308 
v L "bit" 1 446 "int8" `309 
f B "bit_test" 1 446 "int8(int8 var,int8 bit)" `307 
f N "bit_test" 1 447 ""
v L "var" 1 447 "int16" `311 
v L "bit" 1 447 "int8" `312 
f B "bit_test" 1 447 "int8(int16 var,int8 bit)" `310 
f N "bit_test" 1 448 ""
v L "var" 1 448 "int32" `314 
v L "bit" 1 448 "int8" `315 
f B "bit_test" 1 448 "int8(int32 var,int8 bit)" `313  "#use delay() Prototypes:"
f N "delay_cycles" 1 451 ""
v L "count" 1 451 "int8" `317 
f B "delay_cycles" 1 451 "void(int8 count)" `316 
f N "delay_ms" 1 452 ""
v L "time" 1 452 "int16" `319 
f B "delay_ms" 1 452 "void(int16 time)" `318 
f N "delay_us" 1 453 ""
v L "time" 1 453 "int16" `321 
f B "delay_us" 1 453 "void(int16 time)" `320  "#use rs232() Prototypes:"
f N "putchar" 1 456 ""
v L "cdata" 1 456 "int8" `323 
f B "putchar" 1 456 "void(int8 cdata)" `322 
f N "putchar" 1 457 ""
v L "cdata" 1 457 "int8" `325 
v L "stream" 1 457 "int8" `326 
f B "putchar" 1 457 "void(int8 cdata,int8 stream)" `324 
f N "puts" 1 458 ""
v L "string" 1 458 "*int8" `328 
f B "puts" 1 458 "void(*int8 string)" `327 
f N "puts" 1 459 ""
v L "string" 1 459 "*int8" `330 
v L "stream" 1 459 "int8" `331 
f B "puts" 1 459 "void(*int8 string,int8 stream)" `329 
f N "getch" 1 460 ""
f B "getch" 1 460 "int8()" `332 
f N "getch" 1 461 ""
v L "stream" 1 461 "int8" `334 
f B "getch" 1 461 "int8(int8 stream)" `333 
f N "gets" 1 462 ""
v L "string" 1 462 "*int8" `336 
f B "gets" 1 462 "void(*int8 string)" `335 
f N "gets" 1 463 ""
v L "string" 1 463 "*int8" `338 
v L "stream" 1 463 "int8" `339 
f B "gets" 1 463 "void(*int8 string,int8 stream)" `337 
f N "kbhit" 1 464 ""
f B "kbhit" 1 464 "int8()" `340 
f N "kbhit" 1 465 ""
v L "stream" 1 465 "int8" `342 
f B "kbhit" 1 465 "int8(int8 stream)" `341 
f N "printf" 1 466 ""
v L "string" 1 466 "*int8" `344 
f B "printf" 1 466 "void(*int8 string,*int8 _VA_LIST)" `343 
f N "fprintf" 1 467 ""
v L "stream" 1 467 "int8" `347 
v L "string" 1 467 "*int8" `348 
f B "fprintf" 1 467 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `346 
f N "putc_send" 1 468 ""
f B "putc_send" 1 468 "void()" `350 
f N "fputc_send" 1 469 ""
v L "stream" 1 469 "int8" `352 
f B "fputc_send" 1 469 "void(int8 stream)" `351 
f N "rcv_buffer_full" 1 470 ""
f B "rcv_buffer_full" 1 470 "int8()" `353 
f N "rcv_buffer_full" 1 471 ""
v L "stream" 1 471 "int8" `355 
f B "rcv_buffer_full" 1 471 "int8(int8 stream)" `354 
f N "rcv_buffer_bytes" 1 472 ""
f B "rcv_buffer_bytes" 1 472 "int16()" `356 
f N "rcv_buffer_bytes" 1 473 ""
v L "stream" 1 473 "int8" `358 
f B "rcv_buffer_bytes" 1 473 "int16(int8 stream)" `357 
f N "tx_buffer_full" 1 474 ""
f B "tx_buffer_full" 1 474 "int8()" `359 
f N "tx_buffer_full" 1 475 ""
v L "stream" 1 475 "int8" `361 
f B "tx_buffer_full" 1 475 "int8(int8 stream)" `360 
f N "tx_buffer_bytes" 1 476 ""
f B "tx_buffer_bytes" 1 476 "int16()" `362 
f N "tx_buffer_bytes" 1 477 ""
v L "stream" 1 477 "int8" `364 
f B "tx_buffer_bytes" 1 477 "int16(int8 stream)" `363  "#use i2c() Prototypes:"
f N "i2c_read" 1 480 ""
f B "i2c_read" 1 480 "int8()" `365 
f N "i2c_read" 1 481 ""
v L "ack" 1 481 "int8" `367 
f B "i2c_read" 1 481 "int8(int8 ack)" `366 
f N "i2c_read" 1 482 ""
v L "stream" 1 482 "int8" `369 
v L "ack" 1 482 "int8" `370 
f B "i2c_read" 1 482 "int8(int8 stream,int8 ack)" `368 
f N "i2c_write" 1 483 ""
v L "data" 1 483 "int8" `372 
f B "i2c_write" 1 483 "int8(int8 data)" `371 
f N "i2c_write" 1 484 ""
v L "stream" 1 484 "int8" `374 
v L "data" 1 484 "int8" `375 
f B "i2c_write" 1 484 "int8(int8 stream,int8 data)" `373 
f N "i2c_start" 1 485 ""
f B "i2c_start" 1 485 "void()" `376 
f N "i2c_start" 1 486 ""
v L "stream" 1 486 "int8" `378 
f B "i2c_start" 1 486 "void(int8 stream)" `377 
f N "i2c_start" 1 487 ""
v L "stream" 1 487 "int8" `380 
v L "restart" 1 487 "int8" `381 
f B "i2c_start" 1 487 "void(int8 stream,int8 restart)" `379 
f N "i2c_stop" 1 488 ""
f B "i2c_stop" 1 488 "void()" `382 
f N "i2c_stop" 1 489 ""
v L "stream" 1 489 "int8" `384 
f B "i2c_stop" 1 489 "void(int8 stream)" `383 
f N "i2c_isr_state" 1 490 ""
f B "i2c_isr_state" 1 490 "int8()" `385 
f N "i2c_slaveaddr" 1 491 ""
v L "addr" 1 491 "int8" `387 
f B "i2c_slaveaddr" 1 491 "void(int8 addr)" `386 
f N "i2c_slaveaddr" 1 492 ""
v L "stream" 1 492 "int8" `389 
v L "addr" 1 492 "int8" `390 
f B "i2c_slaveaddr" 1 492 "void(int8 stream,int8 addr)" `388 
f N "i2c_poll" 1 493 ""
f B "i2c_poll" 1 493 "int8()" `391 
f N "i2c_poll" 1 494 ""
v L "stream" 1 494 "int8" `393 
f B "i2c_poll" 1 494 "int8(int8 stream)" `392 
f N "i2c_init" 1 495 ""
v L "baud" 1 495 "int32" `395 
f B "i2c_init" 1 495 "void(int32 baud)" `394 
f N "i2c_init" 1 496 ""
v L "stream" 1 496 "int8" `397 
v L "baud" 1 496 "int32" `398 
f B "i2c_init" 1 496 "void(int8 stream,int32 baud)" `396  "#use spi() Prototypes:"
f N "spi_xfer" 1 499 ""
f B "spi_xfer" 1 499 "int8()" `399 
f N "spi_xfer" 1 500 ""
f G "spi_xfer" 1 500 "int16(int8 data)" `400 
f N "spi_xfer" 1 501 ""
f G "spi_xfer" 1 501 "int32(int8 data)" `400 
f N "spi_xfer" 1 502 ""
v L "data" 1 502 "int8" `401 
f B "spi_xfer" 1 502 "int8(int8 data)" `400 
f N "spi_xfer" 1 503 ""
v L "data" 1 503 "int16" `403 
f B "spi_xfer" 1 503 "int16(int16 data)" `402 
f N "spi_xfer" 1 504 ""
v L "data" 1 504 "int32" `405 
f B "spi_xfer" 1 504 "int32(int32 data)" `404 
f N "spi_xfer" 1 505 ""
v L "stream" 1 505 "int8" `407 
v L "data" 1 505 "int8" `408 
f B "spi_xfer" 1 505 "int8(int8 stream,int8 data)" `406 
f N "spi_xfer" 1 506 ""
v L "stream" 1 506 "int8" `410 
v L "data" 1 506 "int16" `411 
f B "spi_xfer" 1 506 "int16(int8 stream,int16 data)" `409 
f N "spi_xfer" 1 507 ""
v L "stream" 1 507 "int8" `413 
v L "data" 1 507 "int32" `414 
f B "spi_xfer" 1 507 "int32(int8 stream,int32 data)" `412 
f N "spi_xfer" 1 508 ""
v L "stream" 1 508 "int8" `416 
v L "data" 1 508 "int8" `417 
v L "bits" 1 508 "int8" `418 
f B "spi_xfer" 1 508 "int8(int8 stream,int8 data,int8 bits)" `415 
f N "spi_xfer" 1 509 ""
v L "stream" 1 509 "int8" `420 
v L "data" 1 509 "int16" `421 
v L "bits" 1 509 "int8" `422 
f B "spi_xfer" 1 509 "int16(int8 stream,int16 data,int8 bits)" `419 
f N "spi_xfer" 1 510 ""
v L "stream" 1 510 "int8" `424 
v L "data" 1 510 "int32" `425 
v L "bits" 1 510 "int8" `426 
f B "spi_xfer" 1 510 "int32(int8 stream,int32 data,int8 bits)" `423 
f N "spi_init" 1 511 ""
v L "baud" 1 511 "int32" `428 
f B "spi_init" 1 511 "void(int32 baud)" `427 
f N "spi_init" 1 512 ""
v L "stream" 1 512 "int8" `430 
v L "baud" 1 512 "int32" `431 
f B "spi_init" 1 512 "void(int8 stream,int32 baud)" `429 
f N "spi_speed" 1 513 ""
v L "baud" 1 513 "int32" `433 
f B "spi_speed" 1 513 "void(int32 baud)" `432 
f N "spi_speed" 1 514 ""
v L "stream" 1 514 "int8" `435 
v L "baud" 1 514 "int32" `436 
f B "spi_speed" 1 514 "void(int8 stream,int32 baud)" `434 
f N "spi_speed" 1 515 ""
v L "stream" 1 515 "int8" `438 
v L "baud" 1 515 "int32" `439 
v L "clock" 1 515 "int32" `440 
f B "spi_speed" 1 515 "void(int8 stream,int32 baud,int32 clock)" `437 
f N "spi_prewrite" 1 516 ""
v L "data" 1 516 "int8" `442 
f B "spi_prewrite" 1 516 "void(int8 data)" `441 
f N "spi_prewrite" 1 517 ""
v L "data" 1 517 "int16" `444 
f B "spi_prewrite" 1 517 "void(int16 data)" `443 
f N "spi_prewrite" 1 518 ""
v L "data" 1 518 "int32" `446 
f B "spi_prewrite" 1 518 "void(int32 data)" `445 
f N "spi_prewrite" 1 519 ""
v L "??65535" 1 519 "int8" `448 
v L "data" 1 519 "int8" `449 
f B "spi_prewrite" 1 519 "void(int8 ,int8 data)" `447 
f N "spi_prewrite" 1 520 ""
v L "??65535" 1 520 "int8" `451 
v L "data" 1 520 "int16" `452 
f B "spi_prewrite" 1 520 "void(int8 ,int16 data)" `450 
f N "spi_prewrite" 1 521 ""
v L "??65535" 1 521 "int8" `454 
v L "data" 1 521 "int32" `455 
f B "spi_prewrite" 1 521 "void(int8 ,int32 data)" `453 
f N "spi_xfer_in" 1 522 ""
f B "spi_xfer_in" 1 522 "int8()" `456 
f N "spi_xfer_in" 1 523 ""
f G "spi_xfer_in" 1 523 "int16(int8 bits)" `457 
f N "spi_xfer_in" 1 524 ""
f G "spi_xfer_in" 1 524 "int32(int8 bits)" `457 
f N "spi_xfer_in" 1 525 ""
v L "bits" 1 525 "int8" `458 
f B "spi_xfer_in" 1 525 "int8(int8 bits)" `457 
f N "spi_xfer_in" 1 526 ""
v L "bits" 1 526 "int8" `460 
f G "spi_xfer_in" 1 526 "int16(int8 bits,int8 bits)" `459 
f N "spi_xfer_in" 1 527 ""
v L "bits" 1 527 "int8" `460 
f G "spi_xfer_in" 1 527 "int32(int8 bits,int8 bits)" `459 
f N "spi_xfer_in" 1 528 ""
v L "stream" 1 528 "int8" `460 
v L "bits" 1 528 "int8" `461 
f B "spi_xfer_in" 1 528 "int8(int8 stream,int8 bits)" `459 
f N "spi_xfer_in" 1 529 ""
v L "stream" 1 529 "int8" `460 
v L "bits" 1 529 "int8" `464 
f G "spi_xfer_in" 1 529 "int16(int8 stream,int8 bits,int8 task)" `462 
f N "spi_xfer_in" 1 530 ""
v L "stream" 1 530 "int8" `460 
v L "bits" 1 530 "int8" `464 
f G "spi_xfer_in" 1 530 "int32(int8 stream,int8 bits,int8 task)" `462  "#use rtos() Prototypes:"
f N "rtos_run" 1 533 ""
f B "rtos_run" 1 533 "void(int8 stream,int8 bits,int8 task)" `462 
f N "rtos_yield" 1 534 ""
f B "rtos_yield" 1 534 "void(int8 bits,int8 task)" `463 
f N "rtos_enable" 1 535 ""
v L "task" 1 535 "int8" `465 
f B "rtos_enable" 1 535 "void(int8 task)" `464 
f N "rtos_disable" 1 536 ""
v L "task" 1 536 "int8" `467 
f B "rtos_disable" 1 536 "void(int8 task)" `466 
f N "rtos_terminate" 1 537 ""
f B "rtos_terminate" 1 537 "void()" `468 
f N "rtos_await" 1 538 ""
v L "flag" 1 538 "int8" `470 
f B "rtos_await" 1 538 "void(int8 flag)" `469 
f N "rtos_wait" 1 539 ""
v L "sem" 1 539 "int8" `472 
f B "rtos_wait" 1 539 "void(int8 sem)" `471 
f N "rtos_signal" 1 540 ""
v L "sem" 1 540 "int8" `474 
f B "rtos_signal" 1 540 "void(int8 sem)" `473 
f N "rtos_msg_send" 1 541 ""
v L "task" 1 541 "int8" `476 
v L "msg" 1 541 "int8" `477 
f B "rtos_msg_send" 1 541 "void(int8 task,int8 msg)" `475 
f N "rtos_msg_read" 1 542 ""
f B "rtos_msg_read" 1 542 "int8()" `478 
f N "rtos_msg_poll" 1 543 ""
f B "rtos_msg_poll" 1 543 "int8()" `479 
f N "rtos_overrun" 1 544 ""
v L "task" 1 544 "int8" `481 
f B "rtos_overrun" 1 544 "int8(int8 task)" `480 
f N "rtos_stats" 1 545 ""
v L "task" 1 545 "int8" `483 
v L "stat" 1 545 "*int8" `484 
f B "rtos_stats" 1 545 "void(int8 task,*int8 stat)" `482  "#use timer() Prototypes:"
f N "get_ticks" 1 548 ""
f B "get_ticks" 1 548 "int8()" `485 
f N "get_ticks" 1 549 ""
f G "get_ticks" 1 549 "int16(int8 stream)" `486 
f N "get_ticks" 1 550 ""
f G "get_ticks" 1 550 "int32(int8 stream)" `486 
f N "get_ticks" 1 551 ""
v L "stream" 1 551 "int8" `487 
f B "get_ticks" 1 551 "int8(int8 stream)" `486 
f N "get_ticks" 1 552 ""
v L "stream" 1 552 "int8" `489 
f G "get_ticks" 1 552 "int16(int8 stream)" `488 
f N "get_ticks" 1 553 ""
v L "stream" 1 553 "int8" `489 
f G "get_ticks" 1 553 "int32(int8 stream)" `488 
f N "set_ticks" 1 554 ""
v L "value" 1 554 "int8" `489 
f B "set_ticks" 1 554 "void(int8 value)" `488 
f N "set_ticks" 1 555 ""
v L "value" 1 555 "int16" `491 
f B "set_ticks" 1 555 "void(int16 value)" `490 
f N "set_ticks" 1 556 ""
v L "value" 1 556 "int32" `493 
f B "set_ticks" 1 556 "void(int32 value)" `492 
f N "set_ticks" 1 557 ""
v L "stream" 1 557 "int8" `495 
v L "value" 1 557 "int8" `496 
f B "set_ticks" 1 557 "void(int8 stream,int8 value)" `494 
f N "set_ticks" 1 558 ""
v L "stream" 1 558 "int8" `498 
v L "value" 1 558 "int16" `499 
f B "set_ticks" 1 558 "void(int8 stream,int16 value)" `497 
f N "set_ticks" 1 559 ""
v L "stream" 1 559 "int8" `501 
v L "value" 1 559 "int32" `502 
f B "set_ticks" 1 559 "void(int8 stream,int32 value)" `500  "#use pwm() Prototypes:"
f N "pwm_on" 1 562 ""
f B "pwm_on" 1 562 "void()" `503 
f N "pwm_on" 1 563 ""
v L "stream" 1 563 "int8" `505 
f B "pwm_on" 1 563 "void(int8 stream)" `504 
f N "pwm_off" 1 564 ""
f B "pwm_off" 1 564 "void()" `506 
f N "pwm_off" 1 565 ""
v L "stream" 1 565 "int8" `508 
f B "pwm_off" 1 565 "void(int8 stream)" `507 
f N "pwm_set_duty" 1 566 ""
v L "duty" 1 566 "int16" `510 
f B "pwm_set_duty" 1 566 "void(int16 duty)" `509 
f N "pwm_set_duty" 1 567 ""
v L "stream" 1 567 "int8" `512 
v L "duty" 1 567 "int16" `513 
f B "pwm_set_duty" 1 567 "void(int8 stream,int16 duty)" `511 
f N "pwm_set_duty_percent" 1 568 ""
v L "percent" 1 568 "int16" `515 
f B "pwm_set_duty_percent" 1 568 "void(int16 percent)" `514 
f N "pwm_set_duty_percent" 1 569 ""
v L "stream" 1 569 "int8" `517 
v L "percent" 1 569 "int16" `518 
f B "pwm_set_duty_percent" 1 569 "void(int8 stream,int16 percent)" `516 
f N "pwm_set_frequency" 1 570 ""
v L "frequency" 1 570 "int32" `520 
f B "pwm_set_frequency" 1 570 "void(int32 frequency)" `519 
f N "pwm_set_frequency" 1 571 ""
v L "stream" 1 571 "int8" `522 
v L "frequency" 1 571 "int32" `523 
f B "pwm_set_frequency" 1 571 "void(int8 stream,int32 frequency)" `521  "#use capture() Prototypes:"
f N "get_capture_time" 1 574 ""
f B "get_capture_time" 1 574 "int16()" `524 
f N "get_capture_time" 1 575 ""
v L "stream" 1 575 "int8" `526 
f B "get_capture_time" 1 575 "int16(int8 stream)" `525 
f N "get_capture_event" 1 576 ""
f B "get_capture_event" 1 576 "int8()" `527 
f N "get_capture_event" 1 577 ""
v L "stream" 1 577 "int8" `529 
f B "get_capture_event" 1 577 "int8(int8 stream)" `528  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 590 ""
v L "address" 1 590 "int16" `531 
f B "goto_address" 1 590 "void(int16 address)" `530 
f N "label_address" 1 591 ""
v L "label" 1 591 "int16" `533 
f B "label_address" 1 591 "int16(int16 label)" `532  "Program Memory Prototypes:"
f N "read_program_memory" 1 594 ""
v L "address" 1 594 "int16" `535 
v L "dataptr" 1 594 "*int8" `536 
v L "count" 1 594 "int16" `537 
f B "read_program_memory" 1 594 "void(int16 address,*int8 dataptr,int16 count)" `534 
f N "read_program_eeprom" 1 595 ""
v L "address" 1 595 "int16" `539 
f B "read_program_eeprom" 1 595 "int16(int16 address)" `538 
f N "erase_program_eeprom" 1 596 ""
v L "address" 1 596 "int16" `541 
f B "erase_program_eeprom" 1 596 "void(int16 address)" `540 
f N "write_program_memory" 1 597 ""
v L "address" 1 597 "int16" `543 
v L "dataptr" 1 597 "*int8" `544 
v L "count" 1 597 "int16" `545 
f B "write_program_memory" 1 597 "void(int16 address,*int8 dataptr,int16 count)" `542 
f N "write_program_eeprom" 1 598 ""
v L "address" 1 598 "int16" `547 
v L "data" 1 598 "int16" `548 
f B "write_program_eeprom" 1 598 "void(int16 address,int16 data)" `546  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 603 "unsigned int16"
f N "read_eeprom" 1 608 ""
v L "address" 1 608 "int16" `550 
f B "read_eeprom" 1 608 "int8(int16 address)" `549 
f N "write_eeprom" 1 609 ""
v L "address" 1 609 "int16" `552 
v L "value" 1 609 "int8" `553 
f B "write_eeprom" 1 609 "void(int16 address,int8 value)" `551  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 616 ""
v L "interrupt" 1 616 "int32" `555 
f B "enable_interrupts" 1 616 "void(int32 interrupt)" `554 
f N "disable_interrupts" 1 617 ""
v L "interrupt" 1 617 "int32" `557 
f B "disable_interrupts" 1 617 "void(int32 interrupt)" `556 
f N "clear_interrupt" 1 618 ""
v L "interrupt" 1 618 "int32" `559 
f B "clear_interrupt" 1 618 "void(int32 interrupt)" `558 
f N "interrupt_active" 1 619 ""
v L "interrupt" 1 619 "int32" `561 
f B "interrupt_active" 1 619 "int8(int32 interrupt)" `560 
f N "interrupt_enabled" 1 620 ""
v L "interrupt" 1 620 "int32" `563 
f B "interrupt_enabled" 1 620 "int8(int32 interrupt)" `562 
f N "ext_int_edge" 1 621 ""
v L "source" 1 621 "int8" `565 
v L "edge" 1 621 "int8" `566 
f B "ext_int_edge" 1 621 "void(int8 source,int8 edge)" `564 
f N "jump_to_isr" 1 622 ""
v L "address" 1 622 "int16" `568 
f B "jump_to_isr" 1 622 "void(int16 address)" `567  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 624 "0x40"
d G "H_TO_L" 1 625 "0"
d G "GLOBAL" 1 627 "0x0BC0"
d G "PERIPH" 1 628 "0x0B40"
d G "INT_RTCC" 1 629 "0x000B20"
d G "INT_RB" 1 630 "0x00FF0B08"
d G "INT_EXT_L2H" 1 631 "0x50000B10"
d G "INT_EXT_H2L" 1 632 "0x60000B10"
d G "INT_EXT" 1 633 "0x000B10"
d G "INT_AD" 1 634 "0x008C40"
d G "INT_TBE" 1 635 "0x008C10"
d G "INT_RDA" 1 636 "0x008C20"
d G "INT_TIMER1" 1 637 "0x008C01"
d G "INT_TIMER2" 1 638 "0x008C02"
d G "INT_CCP1" 1 639 "0x008C04"
d G "INT_SSP" 1 640 "0x008C08"
d G "INT_EEPROM" 1 641 "0x008D10"
d G "INT_TIMER0" 1 642 "0x000B20"
d G "INT_COMP" 1 643 "0x008D40"
d G "INT_OSC_FAIL" 1 644 "0x008D80"
D G "_STDLIB" 2 13 ""
D G "RAND_MAX" 2 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 2 26 "1"
T G "div_t" 2 34 "{sint8 quot,sint8 rem}" `579 
T G "ldiv_t" 2 39 "{sint16 quot,sint16 rem}" `583  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 22 "unsigned int8"
D G "wchar_t" 3 26 "char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 2 44 2 "FUNCTION"
C L "jump_to_isr" 2 47 1 "*"
C L "jump_to_isr" 2 47 1 "*"
F N "atoi" 2 51 ""
V L "s" 2 51 "*int8" `585 
f G "atoi" 2 51 "sint8(*int8 s)" `584  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 2 59 ""
V L "s" 2 59 "*int8" `587 
f G "atoi32" 2 59 "sint32(*int8 s)" `586  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 2 47 2 "FUNCTION"
F N "itoa" 2 80 ""
V L "num" 2 80 "sint32" `589 
V L "base" 2 80 "int8" `590 
V L "s" 2 80 "*int8" `591 
f G "itoa" 2 80 "*int8(sint32 num,int8 base,*int8 s)" `588  "Standard template: signed int16  atol(char * s)"
C L "itoa" 2 82 1 "*"
C L "itoa" 2 82 1 "*"
F N "atol" 2 86 ""
V L "s" 2 86 "*int8" `593 
f G "atol" 2 86 "sint16(*int8 s)" `592  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
F N "strtol" 2 94 ""
V L "s" 2 94 "*int8" `595 
V L "endptr" 2 94 "*int8" `596 
V L "base" 2 94 "sint8" `597 
f G "strtol" 2 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `594  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
F N "strtoul" 2 102 ""
V L "s" 2 102 "*int8" `599 
V L "endptr" 2 102 "*int8" `600 
V L "base" 2 102 "sint8" `601 
f G "strtoul" 2 102 "int16(*int8 s,*int8 endptr,sint8 base)" `598  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 2 96 2 "FUNCTION"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
F N "strtof" 2 111 ""
V L "s" 2 111 "*int8" `603 
V L "endptr" 2 111 "??0 *" `604 
f G "strtof" 2 111 "float(*int8 s,??0 * endptr)" `602  "provided for compatibility"
D G "strtof48" 2 117 "(s,e) strtof(s, e)"
D G "strtod" 2 118 "(s,e) strtof(s, e)"
C L "strtof" 2 104 1 "FUNCTION"
C L "strtof" 2 121 1 "*"
D G "atof" 2 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 2 121 1 "FUNCTION"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
F N "atoe" 2 150 ""
V L "s" 2 150 "*int8" `607 
f G "atoe" 2 150 "float(*int8 s)" `606  "Pseudo-random sequence generation functions"
C L "atoe" 2 144 1 "FUNCTION"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
F N "rand" 2 170 ""
f G "rand" 2 170 "int16()" `608  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
F N "srand" 2 192 ""
V L "seed" 2 192 "int32" `610 
f G "srand" 2 192 "void(int32 seed)" `609  "Memory management functions"
C L "srand" 2 172 3 "FUNCTION"
F N "system" 2 206 ""
V L "string" 2 206 "*int8" `612 
f G "system" 2 206 "sint8(*int8 string)" `611  "Searching and sorting utilities"
C L "system" 2 172 1 "FUNCTION"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 4 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
D G "labs" 2 250 "abs"
F N "div" 2 252 ""
V L "numer" 2 252 "sint8" `614 
V L "denom" 2 252 "sint8" `615 
f G "div" 2 252 "div_t(sint8 numer,sint8 denom)" `613 
F N "ldiv" 2 253 ""
V L "numer" 2 253 "sint16" `617 
V L "denom" 2 253 "sint16" `618 
f G "ldiv" 2 253 "ldiv_t(sint16 numer,sint16 denom)" `616  "Multibyte character functions"
C L "ldiv" 2 230 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 4 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 4 19 10 "FUNCTION"
F N "memmove" 4 34 ""
V L "s1" 4 34 "*void" `620 
V L "s2" 4 34 "*void" `621 
V L "n" 4 34 "int8" `622 
F G "memmove" 4 35 "*int8(*void s1,*void s2,int8 n)" `619 
V L "sc1" 4 36 "*int8" `623 
V L "sc2" 4 37 "*int8" `624 
D G "strcopy" 4 54 "strcpy"
F N "strncpy" 4 61 ""
V L "s1" 4 61 "*int8" `626 
V L "s2" 4 61 "*int8" `627 
V L "n" 4 61 "int8" `628 
F G "strncpy" 4 62 "*int8(*int8 s1,*int8 s2,int8 n)" `625 
V L "s" 4 63 "*int8" `629 
F N "strcat" 4 78 ""
V L "s1" 4 78 "*int8" `631 
V L "s2" 4 78 "*int8" `632 
F G "strcat" 4 79 "*int8(*int8 s1,*int8 s2)" `630 
V L "s" 4 80 "*int8" `633 
F N "strncat" 4 96 ""
V L "s1" 4 96 "*int8" `635 
V L "s2" 4 96 "*int8" `636 
V L "n" 4 96 "int8" `637 
F G "strncat" 4 97 "*int8(*int8 s1,*int8 s2,int8 n)" `634 
V L "s" 4 98 "*int8" `638 
C L "memcmp" 4 19 3 "FUNCTION"
F N "memcmp" 4 120 ""
V L "s1" 4 120 "*void" `640 
V L "s2" 4 120 "*void" `641 
V L "n" 4 120 "int8" `642 
F G "memcmp" 4 121 "sint8(*void s1,*void s2,int8 n)" `639 
V L "su1" 4 122 "*int8" `643 
V L "su2" 4 122 "*int8" `644 
C L "strcmp" 4 19 2 "FUNCTION"
F N "strcmp" 4 134 ""
V L "s1" 4 134 "*int8" `646 
V L "s2" 4 134 "*int8" `647 
F G "strcmp" 4 135 "sint8(*int8 s1,*int8 s2)" `645 
C L "strcoll" 4 19 2 "FUNCTION"
F N "strcoll" 4 144 ""
V L "s1" 4 144 "*int8" `649 
V L "s2" 4 144 "*int8" `650 
F G "strcoll" 4 145 "sint8(*int8 s1,*int8 s2)" `648 
C L "strncmp" 4 19 4 "FUNCTION"
F N "strncmp" 4 157 ""
V L "s1" 4 157 "*int8" `652 
V L "s2" 4 157 "*int8" `653 
V L "n" 4 157 "int8" `654 
F G "strncmp" 4 158 "sint8(*int8 s1,*int8 s2,int8 n)" `651 
C L "strxfrm" 4 19 4 "FUNCTION"
F N "strxfrm" 4 170 ""
V L "s1" 4 170 "*int8" `656 
V L "s2" 4 170 "*int8" `657 
V L "n" 4 170 "int8" `658 
F G "strxfrm" 4 171 "int8(*int8 s1,*int8 s2,int8 n)" `655 
V L "c" 4 172 "int8" `659 
V L "n1" 4 173 "int8" `660 
C L "strxfrm" 4 19 1 "FUNCTION"
F N "memchr" 4 201 ""
V L "s" 4 201 "*void" `662 
V L "c" 4 201 "int8" `663 
V L "n" 4 201 "int8" `664 
F G "memchr" 4 202 "*int8(*void s,int8 c,int8 n)" `661 
V L "uc" 4 203 "int8" `665 
V L "su" 4 204 "*int8" `666 
F N "strchr" 4 215 ""
V L "s" 4 215 "*int8" `668 
V L "c" 4 215 "int8" `669 
F G "strchr" 4 216 "*int8(*int8 s,int8 c)" `667 
C L "strcspn" 4 19 4 "FUNCTION"
F N "strcspn" 4 227 ""
V L "s1" 4 227 "*int8" `671 
V L "s2" 4 227 "*int8" `672 
F G "strcspn" 4 228 "int8(*int8 s1,*int8 s2)" `670 
V L "sc1" 4 229 "*int8" `673 
V L "sc2" 4 229 "*int8" `674 
F N "strpbrk" 4 242 ""
V L "s1" 4 242 "*int8" `676 
V L "s2" 4 242 "*int8" `677 
F G "strpbrk" 4 243 "*int8(*int8 s1,*int8 s2)" `675 
V L "sc1" 4 244 "*int8" `678 
V L "sc2" 4 244 "*int8" `679 
F N "strrchr" 4 257 ""
V L "s" 4 257 "*int8" `681 
V L "c" 4 257 "int8" `682 
F G "strrchr" 4 258 "*int8(*int8 s,int8 c)" `680 
V L "p" 4 259 "*int8" `683 
C L "strspn" 4 19 2 "FUNCTION"
F N "strspn" 4 272 ""
V L "s1" 4 272 "*int8" `685 
V L "s2" 4 272 "*int8" `686 
F G "strspn" 4 273 "int8(*int8 s1,*int8 s2)" `684 
V L "sc1" 4 274 "*int8" `687 
V L "sc2" 4 274 "*int8" `688 
F N "strstr" 4 291 ""
V L "s1" 4 291 "*int8" `690 
V L "s2" 4 291 "*int8" `691 
F G "strstr" 4 292 "*int8(*int8 s1,*int8 s2)" `689 
V L "s" 4 293 "*int8" `692 
V L "t" 4 293 "*int8" `693 
C L "strlen" 4 19 2 "FUNCTION"
F N "strlen" 4 318 ""
V L "s" 4 318 "*int8" `695 
F G "strlen" 4 319 "int8(*int8 s)" `694 
V L "sc" 4 320 "*int8" `696 
F N "strtok" 4 341 ""
V L "s1" 4 341 "*int8" `698 
V L "s2" 4 341 "*int8" `699 
F G "strtok" 4 342 "*int8(*int8 s1,*int8 s2)" `697 
V L "beg" 4 343 "*int8" `700 
V L "end" 4 343 "*int8" `701 
V L "save" 4 344 "*int8" `702 
C L "stricmp" 4 19 6 "FUNCTION"
F N "stricmp" 4 392 ""
V L "s1" 4 392 "*int8" `704 
V L "s2" 4 392 "*int8" `705 
F G "stricmp" 4 393 "sint8(*int8 s1,*int8 s2)" `703 
F N "strlwr" 4 406 ""
V L "s" 4 406 "*int8" `709 
F G "strlwr" 4 407 "*int8(*int8 s)" `708 
V L "p" 4 408 "*int8" `710 
F N "strupr" 4 420 ""
V L "s" 4 420 "*int8" `712 
F G "strupr" 4 421 "*int8(*int8 s)" `711 
V L "p" 4 422 "*int8" `713 
F N "div" 2 275 ""
V L "numer" 2 275 "sint8" `614 
V L "denom" 2 275 "sint8" `716 
F G "div" 2 276 "div_t(sint8 numer,sint8 denom)" `613 
V L "val" 2 277 "div_t" `714 
F N "ldiv" 2 283 ""
V L "numer" 2 283 "sint16" `617 
V L "denom" 2 283 "sint16" `723 
F G "ldiv" 2 284 "ldiv_t(sint16 numer,sint16 denom)" `616 
V L "val" 2 285 "ldiv_t" `721 
F N "atoe" 2 362 ""
V L "s" 2 362 "*int8" `729 
F G "atoe" 2 363 "float(*int8 s)" `606 
V L "pow10" 2 364 "float" `728 
V L "result" 2 365 "float" `729 
V L "sign" 2 366 "int8" `730 
V L "expsign" 2 367 "int8" `731 
V L "c" 2 368 "int8" `732 
V L "ptr" 2 369 "int8" `733 
V L "i" 2 370 "int8" `734 
V L "exp" 2 371 "float" `735 
V L "expcnt" 2 372 "int8" `736 
C L "atoe" 2 398 1 "FUNCTION"
F N "atoi" 2 430 ""
V L "s" 2 430 "*int8" `749 
F G "atoi" 2 431 "sint8(*int8 s)" `584 
V L "result" 2 432 "sint8" `748 
V L "sign" 2 433 "int8" `749 
V L "base" 2 433 "int8" `750 
V L "index" 2 433 "int8" `751 
V L "c" 2 434 "int8" `752 
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
F N "atol" 2 499 ""
V L "s" 2 499 "*int8" `754 
F G "atol" 2 500 "sint16(*int8 s)" `592 
V L "result" 2 501 "sint16" `753 
V L "sign" 2 502 "int8" `754 
V L "base" 2 502 "int8" `755 
V L "index" 2 502 "int8" `756 
V L "c" 2 503 "int8" `757 
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "mult_with10" 2 398 1 "FUNCTION"
F N "mult_with10" 2 566 ""
V L "num" 2 566 "int32" `759 
F G "mult_with10" 2 567 "sint32(int32 num)" `758 
F N "atoi32" 2 572 ""
V L "s" 2 572 "*int8" `761 
F G "atoi32" 2 573 "sint32(*int8 s)" `586 
V L "result" 2 574 "sint32" `760 
V L "sign" 2 575 "int8" `761 
V L "base" 2 575 "int8" `762 
V L "index" 2 575 "int8" `763 
V L "c" 2 576 "int8" `764 
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
F N "itoa" 2 771 ""
V L "num" 2 771 "sint32" `589 
V L "base" 2 771 "int8" `590 
V L "s" 2 771 "*int8" `768 
F G "itoa" 2 772 "*int8(sint32 num,int8 base,*int8 s)" `588 
V L "temp" 2 773 "int32" `765 
V L "i" 2 774 "int8" `766 
V L "sign" 2 774 "int8" `767 
V L "cnt" 2 774 "int8" `768 
V L "c" 2 775 "int8" `769 
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
F N "strtof" 2 886 ""
V L "s" 2 886 "*int8" `603 
V L "endptr" 2 886 "??0 *" `778 
F G "strtof" 2 887 "float(*int8 s,??0 * endptr)" `602 
V L "pow10" 2 888 "float" `776 
V L "result" 2 889 "float" `777 
V L "skip" 2 890 "int1" `778 
V L "sign" 2 890 "int1" `779 
V L "point" 2 890 "int1" `780 
V L "c" 2 891 "int8" `781 
V L "ptr" 2 892 "int8" `782 
F N "strtoul" 2 1104 ""
V L "s" 2 1104 "*int8" `599 
V L "endptr" 2 1104 "*int8" `600 
V L "base" 2 1104 "sint8" `787 
F G "strtoul" 2 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `598 
V L "sc" 2 1106 "*int8" `784 
V L "s1" 2 1106 "*int8" `785 
V L "sd" 2 1106 "*int8" `786 
V L "x" 2 1107 "int16" `787 
V L "sign" 2 1108 "int8" `788 
V L "digits" 2 1109 "int8[1]" `789 
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
F N "strtol" 2 1166 ""
V L "s" 2 1166 "*int8" `595 
V L "endptr" 2 1166 "*int8" `596 
V L "base" 2 1166 "sint8" `794 
F G "strtol" 2 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `594 
V L "sc" 2 1168 "*int8" `791 
V L "s1" 2 1168 "*int8" `792 
V L "sd" 2 1168 "*int8" `793 
V L "x" 2 1169 "sint16" `794 
V L "sign" 2 1170 "int8" `795 
V L "digits" 2 1171 "int8[1]" `796 
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
F N "system" 2 1229 ""
V L "string" 2 1229 "*int8" `799 
F G "system" 2 1230 "sint8(*int8 string)" `611 
F N "mblen" 2 1234 ""
V L "s" 2 1234 "*int8" `799 
V L "n" 2 1234 "int8" `800 
F G "mblen" 2 1235 "int8(*int8 s,int8 n)" `798 
F N "mbtowc" 2 1239 ""
V L "pwc" 2 1239 "*int8" `802 
V L "s" 2 1239 "*int8" `803 
V L "n" 2 1239 "int8" `804 
F G "mbtowc" 2 1240 "int8(*int8 pwc,*int8 s,int8 n)" `801 
F N "wctomb" 2 1245 ""
V L "s" 2 1245 "*int8" `806 
V L "wchar" 2 1245 "int8" `807 
F G "wctomb" 2 1246 "int8(*int8 s,int8 wchar)" `805 
F N "mbstowcs" 2 1251 ""
V L "pwcs" 2 1251 "*int8" `809 
V L "s" 2 1251 "*int8" `810 
V L "n" 2 1251 "int8" `811 
F G "mbstowcs" 2 1252 "int8(*int8 pwcs,*int8 s,int8 n)" `808 
F N "wcstombs" 2 1257 ""
V L "s" 2 1257 "*int8" `813 
V L "pwcs" 2 1257 "*int8" `814 
V L "n" 2 1257 "int8" `815 
F G "wcstombs" 2 1258 "int8(*int8 s,*int8 pwcs,int8 n)" `812 
V G "_Randseed" 2 1267 "int32" `816 
F N "rand" 2 1269 ""
F G "rand" 2 1270 "int16()" `608 
F N "srand" 2 1275 ""
V L "seed" 2 1275 "int32" `821 
F G "srand" 2 1276 "void(int32 seed)" `609 
F N "*_Cmpfun" 2 1285 ""
V L "p1" 2 1285 "*int8" `821 
V L "p2" 2 1285 "*int8" `822 
T G "*_Cmpfun" 2 1285 "sint8(*int8 p1,*int8 p2)" `820 
F N "qsort" 2 1292 ""
V L "qdata" 2 1292 "*int8" `825 
V L "qitems" 2 1292 "int8" `826 
V L "qsize" 2 1292 "int8" `827 
V L "cmp" 2 1292 "_Cmpfun" `828 
F G "qsort" 2 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `824 
V L "m" 2 1293 "int8" `829 
V L "j" 2 1293 "int8" `830 
V L "i" 2 1293 "int8" `831 
V L "l" 2 1293 "int8" `832 
V L "done" 2 1294 "int1" `833 
V L "t" 2 1295 "int8[16]" `834 
F N "bsearch" 2 1320 ""
V L "key" 2 1320 "*int8" `837 
V L "base" 2 1320 "*int8" `838 
V L "num" 2 1320 "int8" `839 
V L "width" 2 1320 "int8" `840 
V L "cmp" 2 1320 "_Cmpfun" `841 
F G "bsearch" 2 1321 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `836 
V L "p" 2 1322 "*int8" `842 
V L "q" 2 1322 "*int8" `843 
V L "n" 2 1323 "int8" `844 
V L "pivot" 2 1324 "int8" `845 
V L "val" 2 1325 "sint8" `846 
C L "bsearch" 2 398 1 "FUNCTION"
V G "trigbit" 0 8 "int1" `848 
V G "command" 0 9 "int8" `849 
V G "address1" 0 10 "int8" `850 
V G "height" 0 11 "int16" `851 
V G "dtoabit" 0 11 "int16" `852 
V G "num" 0 11 "int16" `853 
V G "i" 0 12 "int16" `854 
V G "x" 0 13 "int8" `855 
V G "cmd" 0 13 "int8" `856 
V G "addrs1" 0 13 "int8" `857 
V G "heighth" 0 13 "int8" `858 
V G "heightl" 0 13 "int8" `859 
V G "trigdelay5" 0 13 "int8" `860 
V G "trigdelay025" 0 13 "int8" `861 
V G "usdelh" 0 13 "int8" `862 
V G "usdell" 0 13 "int8" `863 
V G "numhi" 0 13 "int8" `864 
V G "numlo" 0 13 "int8" `865 
V G "c" 0 14 "int8" `866 
F N "clear_usart_receiver" 0 16 ""
f G "clear_usart_receiver" 0 16 "void()" `867 
F N "run" 0 17 ""
f G "run" 0 17 "void()" `868 
F N "trigdel5nS" 0 18 ""
f G "trigdel5nS" 0 18 "void()" `869 
F N "trigdel025nS" 0 19 ""
f G "trigdel025nS" 0 19 "void()" `870 
F N "continuous" 0 20 ""
f G "continuous" 0 20 "void()" `871 
F N "numberhi" 0 21 ""
f G "numberhi" 0 21 "void()" `872 
F N "numberlo" 0 22 ""
f G "numberlo" 0 22 "void()" `873 
F N "loadheight" 0 23 ""
f G "loadheight" 0 23 "void()" `874 
F N "heighthi" 0 24 ""
f G "heighthi" 0 24 "void()" `875 
F N "heightlo" 0 25 ""
f G "heightlo" 0 25 "void()" `876 
F N "usdelay" 0 26 ""
f G "usdelay" 0 26 "void()" `877 
F N "flash1" 0 27 ""
f G "flash1" 0 27 "void()" `878 
F N "flash2" 0 28 ""
f G "flash2" 0 28 "void()" `879 
F N "flash3" 0 29 ""
f G "flash3" 0 29 "void()" `880 
F N "clear_usart_receiver" 0 31 ""
f G "clear_usart_receiver" 0 31 "int8()" `881 
F N "MAIN" 0 33 ""
F G "MAIN" 0 34 "void()" `882 
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "flash1" 0 9 1 "FUNCTION"
F N "flash1" 0 63 ""
F G "flash1" 0 64 "void()" `878 
C L "flash1" 0 9 1 "FUNCTION"
C L "flash1" 0 9 1 "FUNCTION"
C L "flash1" 0 9 1 "FUNCTION"
C L "flash2" 0 9 1 "FUNCTION"
F N "flash2" 0 74 ""
F G "flash2" 0 75 "void()" `879 
C L "flash2" 0 9 1 "FUNCTION"
C L "flash2" 0 9 1 "FUNCTION"
C L "flash2" 0 9 1 "FUNCTION"
C L "flash2" 0 9 1 "FUNCTION"
C L "flash2" 0 9 1 "FUNCTION"
C L "flash3" 0 9 1 "FUNCTION"
F N "flash3" 0 89 ""
F G "flash3" 0 90 "void()" `880 
C L "flash3" 0 9 1 "FUNCTION"
C L "flash3" 0 9 1 "FUNCTION"
C L "flash3" 0 9 1 "FUNCTION"
C L "flash3" 0 9 1 "FUNCTION"
C L "flash3" 0 9 1 "FUNCTION"
C L "flash3" 0 9 1 "FUNCTION"
C L "flash3" 0 9 1 "FUNCTION"
C L "heighthi" 0 9 1 "FUNCTION"
F N "heighthi" 0 108 ""
F G "heighthi" 0 109 "void()" `875 
C L "heightlo" 0 9 1 "FUNCTION"
F N "heightlo" 0 115 ""
F G "heightlo" 0 116 "void()" `876 
C L "loadheight" 0 9 1 "FUNCTION"
F N "loadheight" 0 122 ""
F G "loadheight" 0 123 "void()" `874 
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 14 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "loadheight" 0 9 1 "FUNCTION"
C L "trigdel5nS" 0 9 1 "FUNCTION"
F N "trigdel5nS" 0 172 ""
F G "trigdel5nS" 0 173 "void()" `869 
C L "trigdel5nS" 0 9 1 "FUNCTION"
C L "trigdel5nS" 0 9 1 "FUNCTION"
C L "trigdel5nS" 0 9 1 "FUNCTION"
C L "trigdel5nS" 0 9 1 "FUNCTION"
C L "trigdel5nS" 0 9 1 "FUNCTION"
C L "trigdel5nS" 0 9 1 "FUNCTION"
C L "trigdel5nS" 0 9 1 "FUNCTION"
C L "trigdel025nS" 0 9 1 "FUNCTION"
F N "trigdel025nS" 0 193 ""
F G "trigdel025nS" 0 194 "void()" `870 
C L "trigdel025nS" 0 9 1 "FUNCTION"
C L "trigdel025nS" 0 9 1 "FUNCTION"
C L "trigdel025nS" 0 9 1 "FUNCTION"
C L "trigdel025nS" 0 9 1 "FUNCTION"
C L "trigdel025nS" 0 9 1 "FUNCTION"
C L "trigdel025nS" 0 9 1 "FUNCTION"
C L "trigdel025nS" 0 9 1 "FUNCTION"
C L "numberhi" 0 9 1 "FUNCTION"
F N "numberhi" 0 214 ""
F G "numberhi" 0 215 "void()" `872 
C L "numberlo" 0 9 1 "FUNCTION"
F N "numberlo" 0 221 ""
F G "numberlo" 0 222 "void()" `873 
C L "run" 0 9 1 "FUNCTION"
F N "run" 0 228 ""
F G "run" 0 229 "void()" `868 
C L "run" 0 9 1 "FUNCTION"
C L "run" 0 9 1 "FUNCTION"
C L "run" 0 9 1 "FUNCTION"
C L "run" 0 9 7 "FUNCTION"
C L "usdelay" 0 9 1 "FUNCTION"
F N "usdelay" 0 263 ""
F G "usdelay" 0 264 "void()" `877 
C L "clear_usart_receiver" 0 9 1 "FUNCTION"
F N "clear_usart_receiver" 0 272 ""
F G "clear_usart_receiver" 0 273 "void()" `867 
C L "continuous" 0 9 1 "FUNCTION"
F N "continuous" 0 282 ""
F G "continuous" 0 283 "void()" `871 
C L "continuous" 0 9 1 "FUNCTION"
C L "continuous" 0 9 1 "FUNCTION"
C L "continuous" 0 9 1 "FUNCTION"
C L "continuous" 0 9 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
